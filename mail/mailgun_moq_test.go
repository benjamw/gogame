// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mail

import (
	"io"
	"net/http"
	"sync"
	"time"

	"github.com/mailgun/mailgun-go"
)

var (
	lockMailgunMockAddBounce                 sync.RWMutex
	lockMailgunMockApiBase                   sync.RWMutex
	lockMailgunMockApiKey                    sync.RWMutex
	lockMailgunMockChangeCredentialPassword  sync.RWMutex
	lockMailgunMockClient                    sync.RWMutex
	lockMailgunMockCreateCampaign            sync.RWMutex
	lockMailgunMockCreateComplaint           sync.RWMutex
	lockMailgunMockCreateCredential          sync.RWMutex
	lockMailgunMockCreateDomain              sync.RWMutex
	lockMailgunMockCreateList                sync.RWMutex
	lockMailgunMockCreateMember              sync.RWMutex
	lockMailgunMockCreateMemberList          sync.RWMutex
	lockMailgunMockCreateRoute               sync.RWMutex
	lockMailgunMockCreateWebhook             sync.RWMutex
	lockMailgunMockDeleteBounce              sync.RWMutex
	lockMailgunMockDeleteCampaign            sync.RWMutex
	lockMailgunMockDeleteComplaint           sync.RWMutex
	lockMailgunMockDeleteCredential          sync.RWMutex
	lockMailgunMockDeleteDomain              sync.RWMutex
	lockMailgunMockDeleteList                sync.RWMutex
	lockMailgunMockDeleteMember              sync.RWMutex
	lockMailgunMockDeleteRoute               sync.RWMutex
	lockMailgunMockDeleteStoredMessage       sync.RWMutex
	lockMailgunMockDeleteTag                 sync.RWMutex
	lockMailgunMockDeleteWebhook             sync.RWMutex
	lockMailgunMockDomain                    sync.RWMutex
	lockMailgunMockGetBounces                sync.RWMutex
	lockMailgunMockGetCampaigns              sync.RWMutex
	lockMailgunMockGetComplaints             sync.RWMutex
	lockMailgunMockGetCredentials            sync.RWMutex
	lockMailgunMockGetDomains                sync.RWMutex
	lockMailgunMockGetListByAddress          sync.RWMutex
	lockMailgunMockGetLists                  sync.RWMutex
	lockMailgunMockGetMemberByAddress        sync.RWMutex
	lockMailgunMockGetMembers                sync.RWMutex
	lockMailgunMockGetRouteByID              sync.RWMutex
	lockMailgunMockGetRoutes                 sync.RWMutex
	lockMailgunMockGetSingleBounce           sync.RWMutex
	lockMailgunMockGetSingleComplaint        sync.RWMutex
	lockMailgunMockGetSingleDomain           sync.RWMutex
	lockMailgunMockGetStats                  sync.RWMutex
	lockMailgunMockGetStoredMessage          sync.RWMutex
	lockMailgunMockGetStoredMessageForURL    sync.RWMutex
	lockMailgunMockGetStoredMessageRaw       sync.RWMutex
	lockMailgunMockGetStoredMessageRawForURL sync.RWMutex
	lockMailgunMockGetTag                    sync.RWMutex
	lockMailgunMockGetUnsubscribes           sync.RWMutex
	lockMailgunMockGetUnsubscribesByAddress  sync.RWMutex
	lockMailgunMockGetWebhookByType          sync.RWMutex
	lockMailgunMockGetWebhooks               sync.RWMutex
	lockMailgunMockListEvents                sync.RWMutex
	lockMailgunMockListTags                  sync.RWMutex
	lockMailgunMockNewEventIterator          sync.RWMutex
	lockMailgunMockNewMIMEMessage            sync.RWMutex
	lockMailgunMockNewMessage                sync.RWMutex
	lockMailgunMockParseAddresses            sync.RWMutex
	lockMailgunMockPollEvents                sync.RWMutex
	lockMailgunMockPublicApiKey              sync.RWMutex
	lockMailgunMockRemoveUnsubscribe         sync.RWMutex
	lockMailgunMockRemoveUnsubscribeWithTag  sync.RWMutex
	lockMailgunMockSend                      sync.RWMutex
	lockMailgunMockSetAPIBase                sync.RWMutex
	lockMailgunMockSetClient                 sync.RWMutex
	lockMailgunMockUnsubscribe               sync.RWMutex
	lockMailgunMockUpdateCampaign            sync.RWMutex
	lockMailgunMockUpdateList                sync.RWMutex
	lockMailgunMockUpdateMember              sync.RWMutex
	lockMailgunMockUpdateRoute               sync.RWMutex
	lockMailgunMockUpdateWebhook             sync.RWMutex
	lockMailgunMockValidateEmail             sync.RWMutex
	lockMailgunMockVerifyWebhookRequest      sync.RWMutex
)

// MailgunMock is a mock implementation of Mailgun.
//
//     func TestSomethingThatUsesMailgun(t *testing.T) {
//
//         // make and configure a mocked Mailgun
//         mockedMailgun := &MailgunMock{
//             AddBounceFunc: func(address string, code string, error string) error {
// 	               panic("TODO: mock out the AddBounce method")
//             },
//             ApiBaseFunc: func() string {
// 	               panic("TODO: mock out the ApiBase method")
//             },
//             ApiKeyFunc: func() string {
// 	               panic("TODO: mock out the ApiKey method")
//             },
//             ChangeCredentialPasswordFunc: func(id string, password string) error {
// 	               panic("TODO: mock out the ChangeCredentialPassword method")
//             },
//             ClientFunc: func() *http.Client {
// 	               panic("TODO: mock out the Client method")
//             },
//             CreateCampaignFunc: func(name string, id string) error {
// 	               panic("TODO: mock out the CreateCampaign method")
//             },
//             CreateComplaintFunc: func(in1 string) error {
// 	               panic("TODO: mock out the CreateComplaint method")
//             },
//             CreateCredentialFunc: func(login string, password string) error {
// 	               panic("TODO: mock out the CreateCredential method")
//             },
//             CreateDomainFunc: func(name string, smtpPassword string, spamAction string, wildcard bool) error {
// 	               panic("TODO: mock out the CreateDomain method")
//             },
//             CreateListFunc: func(in1 mailgun.List) (mailgun.List, error) {
// 	               panic("TODO: mock out the CreateList method")
//             },
//             CreateMemberFunc: func(merge bool, addr string, prototype mailgun.Member) error {
// 	               panic("TODO: mock out the CreateMember method")
//             },
//             CreateMemberListFunc: func(subscribed *bool, addr string, newMembers []interface{}) error {
// 	               panic("TODO: mock out the CreateMemberList method")
//             },
//             CreateRouteFunc: func(in1 mailgun.Route) (mailgun.Route, error) {
// 	               panic("TODO: mock out the CreateRoute method")
//             },
//             CreateWebhookFunc: func(kind string, url string) error {
// 	               panic("TODO: mock out the CreateWebhook method")
//             },
//             DeleteBounceFunc: func(address string) error {
// 	               panic("TODO: mock out the DeleteBounce method")
//             },
//             DeleteCampaignFunc: func(id string) error {
// 	               panic("TODO: mock out the DeleteCampaign method")
//             },
//             DeleteComplaintFunc: func(in1 string) error {
// 	               panic("TODO: mock out the DeleteComplaint method")
//             },
//             DeleteCredentialFunc: func(id string) error {
// 	               panic("TODO: mock out the DeleteCredential method")
//             },
//             DeleteDomainFunc: func(name string) error {
// 	               panic("TODO: mock out the DeleteDomain method")
//             },
//             DeleteListFunc: func(in1 string) error {
// 	               panic("TODO: mock out the DeleteList method")
//             },
//             DeleteMemberFunc: func(Member string, list string) error {
// 	               panic("TODO: mock out the DeleteMember method")
//             },
//             DeleteRouteFunc: func(in1 string) error {
// 	               panic("TODO: mock out the DeleteRoute method")
//             },
//             DeleteStoredMessageFunc: func(id string) error {
// 	               panic("TODO: mock out the DeleteStoredMessage method")
//             },
//             DeleteTagFunc: func(tag string) error {
// 	               panic("TODO: mock out the DeleteTag method")
//             },
//             DeleteWebhookFunc: func(kind string) error {
// 	               panic("TODO: mock out the DeleteWebhook method")
//             },
//             DomainFunc: func() string {
// 	               panic("TODO: mock out the Domain method")
//             },
//             GetBouncesFunc: func(limit int, skip int) (int, []mailgun.Bounce, error) {
// 	               panic("TODO: mock out the GetBounces method")
//             },
//             GetCampaignsFunc: func() (int, []mailgun.Campaign, error) {
// 	               panic("TODO: mock out the GetCampaigns method")
//             },
//             GetComplaintsFunc: func(limit int, skip int) (int, []mailgun.Complaint, error) {
// 	               panic("TODO: mock out the GetComplaints method")
//             },
//             GetCredentialsFunc: func(limit int, skip int) (int, []mailgun.Credential, error) {
// 	               panic("TODO: mock out the GetCredentials method")
//             },
//             GetDomainsFunc: func(limit int, skip int) (int, []mailgun.Domain, error) {
// 	               panic("TODO: mock out the GetDomains method")
//             },
//             GetListByAddressFunc: func(in1 string) (mailgun.List, error) {
// 	               panic("TODO: mock out the GetListByAddress method")
//             },
//             GetListsFunc: func(limit int, skip int, filter string) (int, []mailgun.List, error) {
// 	               panic("TODO: mock out the GetLists method")
//             },
//             GetMemberByAddressFunc: func(MemberAddr string, listAddr string) (mailgun.Member, error) {
// 	               panic("TODO: mock out the GetMemberByAddress method")
//             },
//             GetMembersFunc: func(limit int, skip int, subfilter *bool, address string) (int, []mailgun.Member, error) {
// 	               panic("TODO: mock out the GetMembers method")
//             },
//             GetRouteByIDFunc: func(in1 string) (mailgun.Route, error) {
// 	               panic("TODO: mock out the GetRouteByID method")
//             },
//             GetRoutesFunc: func(limit int, skip int) (int, []mailgun.Route, error) {
// 	               panic("TODO: mock out the GetRoutes method")
//             },
//             GetSingleBounceFunc: func(address string) (mailgun.Bounce, error) {
// 	               panic("TODO: mock out the GetSingleBounce method")
//             },
//             GetSingleComplaintFunc: func(address string) (mailgun.Complaint, error) {
// 	               panic("TODO: mock out the GetSingleComplaint method")
//             },
//             GetSingleDomainFunc: func(domain string) (mailgun.Domain, []mailgun.DNSRecord, []mailgun.DNSRecord, error) {
// 	               panic("TODO: mock out the GetSingleDomain method")
//             },
//             GetStatsFunc: func(limit int, skip int, startDate *time.Time, event ...string) (int, []mailgun.Stat, error) {
// 	               panic("TODO: mock out the GetStats method")
//             },
//             GetStoredMessageFunc: func(id string) (mailgun.StoredMessage, error) {
// 	               panic("TODO: mock out the GetStoredMessage method")
//             },
//             GetStoredMessageForURLFunc: func(url string) (mailgun.StoredMessage, error) {
// 	               panic("TODO: mock out the GetStoredMessageForURL method")
//             },
//             GetStoredMessageRawFunc: func(id string) (mailgun.StoredMessageRaw, error) {
// 	               panic("TODO: mock out the GetStoredMessageRaw method")
//             },
//             GetStoredMessageRawForURLFunc: func(url string) (mailgun.StoredMessageRaw, error) {
// 	               panic("TODO: mock out the GetStoredMessageRawForURL method")
//             },
//             GetTagFunc: func(tag string) (mailgun.TagItem, error) {
// 	               panic("TODO: mock out the GetTag method")
//             },
//             GetUnsubscribesFunc: func(limit int, skip int) (int, []mailgun.Unsubscription, error) {
// 	               panic("TODO: mock out the GetUnsubscribes method")
//             },
//             GetUnsubscribesByAddressFunc: func(in1 string) (int, []mailgun.Unsubscription, error) {
// 	               panic("TODO: mock out the GetUnsubscribesByAddress method")
//             },
//             GetWebhookByTypeFunc: func(kind string) (string, error) {
// 	               panic("TODO: mock out the GetWebhookByType method")
//             },
//             GetWebhooksFunc: func() (map[string]string, error) {
// 	               panic("TODO: mock out the GetWebhooks method")
//             },
//             ListEventsFunc: func(in1 *mailgun.EventsOptions) *mailgun.EventIterator {
// 	               panic("TODO: mock out the ListEvents method")
//             },
//             ListTagsFunc: func(in1 *mailgun.TagOptions) *mailgun.TagIterator {
// 	               panic("TODO: mock out the ListTags method")
//             },
//             NewEventIteratorFunc: func() *mailgun.EventIterator {
// 	               panic("TODO: mock out the NewEventIterator method")
//             },
//             NewMIMEMessageFunc: func(body io.ReadCloser, to ...string) *mailgun.Message {
// 	               panic("TODO: mock out the NewMIMEMessage method")
//             },
//             NewMessageFunc: func(from string, subject string, text string, to ...string) *mailgun.Message {
// 	               panic("TODO: mock out the NewMessage method")
//             },
//             ParseAddressesFunc: func(addresses ...string) ([]string, []string, error) {
// 	               panic("TODO: mock out the ParseAddresses method")
//             },
//             PollEventsFunc: func(in1 *mailgun.EventsOptions) *mailgun.EventPoller {
// 	               panic("TODO: mock out the PollEvents method")
//             },
//             PublicApiKeyFunc: func() string {
// 	               panic("TODO: mock out the PublicApiKey method")
//             },
//             RemoveUnsubscribeFunc: func(in1 string) error {
// 	               panic("TODO: mock out the RemoveUnsubscribe method")
//             },
//             RemoveUnsubscribeWithTagFunc: func(a string, t string) error {
// 	               panic("TODO: mock out the RemoveUnsubscribeWithTag method")
//             },
//             SendFunc: func(m *mailgun.Message) (string, string, error) {
// 	               panic("TODO: mock out the Send method")
//             },
//             SetAPIBaseFunc: func(url string)  {
// 	               panic("TODO: mock out the SetAPIBase method")
//             },
//             SetClientFunc: func(client *http.Client)  {
// 	               panic("TODO: mock out the SetClient method")
//             },
//             UnsubscribeFunc: func(address string, tag string) error {
// 	               panic("TODO: mock out the Unsubscribe method")
//             },
//             UpdateCampaignFunc: func(oldId string, name string, newId string) error {
// 	               panic("TODO: mock out the UpdateCampaign method")
//             },
//             UpdateListFunc: func(in1 string, in2 mailgun.List) (mailgun.List, error) {
// 	               panic("TODO: mock out the UpdateList method")
//             },
//             UpdateMemberFunc: func(Member string, List string, prototype mailgun.Member) (mailgun.Member, error) {
// 	               panic("TODO: mock out the UpdateMember method")
//             },
//             UpdateRouteFunc: func(in1 string, in2 mailgun.Route) (mailgun.Route, error) {
// 	               panic("TODO: mock out the UpdateRoute method")
//             },
//             UpdateWebhookFunc: func(kind string, url string) error {
// 	               panic("TODO: mock out the UpdateWebhook method")
//             },
//             ValidateEmailFunc: func(email string) (mailgun.EmailVerification, error) {
// 	               panic("TODO: mock out the ValidateEmail method")
//             },
//             VerifyWebhookRequestFunc: func(req *http.Request) (bool, error) {
// 	               panic("TODO: mock out the VerifyWebhookRequest method")
//             },
//         }
//
//         // TODO: use mockedMailgun in code that requires Mailgun
//         //       and then make assertions.
//
//     }
type MailgunMock struct {
	// AddBounceFunc mocks the AddBounce method.
	AddBounceFunc func(address string, code string, error string) error

	// ApiBaseFunc mocks the ApiBase method.
	ApiBaseFunc func() string

	// ApiKeyFunc mocks the ApiKey method.
	ApiKeyFunc func() string

	// ChangeCredentialPasswordFunc mocks the ChangeCredentialPassword method.
	ChangeCredentialPasswordFunc func(id string, password string) error

	// ClientFunc mocks the Client method.
	ClientFunc func() *http.Client

	// CreateCampaignFunc mocks the CreateCampaign method.
	CreateCampaignFunc func(name string, id string) error

	// CreateComplaintFunc mocks the CreateComplaint method.
	CreateComplaintFunc func(in1 string) error

	// CreateCredentialFunc mocks the CreateCredential method.
	CreateCredentialFunc func(login string, password string) error

	// CreateDomainFunc mocks the CreateDomain method.
	CreateDomainFunc func(name string, smtpPassword string, spamAction string, wildcard bool) error

	// CreateListFunc mocks the CreateList method.
	CreateListFunc func(in1 mailgun.List) (mailgun.List, error)

	// CreateMemberFunc mocks the CreateMember method.
	CreateMemberFunc func(merge bool, addr string, prototype mailgun.Member) error

	// CreateMemberListFunc mocks the CreateMemberList method.
	CreateMemberListFunc func(subscribed *bool, addr string, newMembers []interface{}) error

	// CreateRouteFunc mocks the CreateRoute method.
	CreateRouteFunc func(in1 mailgun.Route) (mailgun.Route, error)

	// CreateWebhookFunc mocks the CreateWebhook method.
	CreateWebhookFunc func(kind string, url string) error

	// DeleteBounceFunc mocks the DeleteBounce method.
	DeleteBounceFunc func(address string) error

	// DeleteCampaignFunc mocks the DeleteCampaign method.
	DeleteCampaignFunc func(id string) error

	// DeleteComplaintFunc mocks the DeleteComplaint method.
	DeleteComplaintFunc func(in1 string) error

	// DeleteCredentialFunc mocks the DeleteCredential method.
	DeleteCredentialFunc func(id string) error

	// DeleteDomainFunc mocks the DeleteDomain method.
	DeleteDomainFunc func(name string) error

	// DeleteListFunc mocks the DeleteList method.
	DeleteListFunc func(in1 string) error

	// DeleteMemberFunc mocks the DeleteMember method.
	DeleteMemberFunc func(Member string, List string) error

	// DeleteRouteFunc mocks the DeleteRoute method.
	DeleteRouteFunc func(in1 string) error

	// DeleteStoredMessageFunc mocks the DeleteStoredMessage method.
	DeleteStoredMessageFunc func(id string) error

	// DeleteTagFunc mocks the DeleteTag method.
	DeleteTagFunc func(tag string) error

	// DeleteWebhookFunc mocks the DeleteWebhook method.
	DeleteWebhookFunc func(kind string) error

	// DomainFunc mocks the Domain method.
	DomainFunc func() string

	// GetBouncesFunc mocks the GetBounces method.
	GetBouncesFunc func(limit int, skip int) (int, []mailgun.Bounce, error)

	// GetCampaignsFunc mocks the GetCampaigns method.
	GetCampaignsFunc func() (int, []mailgun.Campaign, error)

	// GetComplaintsFunc mocks the GetComplaints method.
	GetComplaintsFunc func(limit int, skip int) (int, []mailgun.Complaint, error)

	// GetCredentialsFunc mocks the GetCredentials method.
	GetCredentialsFunc func(limit int, skip int) (int, []mailgun.Credential, error)

	// GetDomainsFunc mocks the GetDomains method.
	GetDomainsFunc func(limit int, skip int) (int, []mailgun.Domain, error)

	// GetListByAddressFunc mocks the GetListByAddress method.
	GetListByAddressFunc func(in1 string) (mailgun.List, error)

	// GetListsFunc mocks the GetLists method.
	GetListsFunc func(limit int, skip int, filter string) (int, []mailgun.List, error)

	// GetMemberByAddressFunc mocks the GetMemberByAddress method.
	GetMemberByAddressFunc func(MemberAddr string, listAddr string) (mailgun.Member, error)

	// GetMembersFunc mocks the GetMembers method.
	GetMembersFunc func(limit int, skip int, subfilter *bool, address string) (int, []mailgun.Member, error)

	// GetRouteByIDFunc mocks the GetRouteByID method.
	GetRouteByIDFunc func(in1 string) (mailgun.Route, error)

	// GetRoutesFunc mocks the GetRoutes method.
	GetRoutesFunc func(limit int, skip int) (int, []mailgun.Route, error)

	// GetSingleBounceFunc mocks the GetSingleBounce method.
	GetSingleBounceFunc func(address string) (mailgun.Bounce, error)

	// GetSingleComplaintFunc mocks the GetSingleComplaint method.
	GetSingleComplaintFunc func(address string) (mailgun.Complaint, error)

	// GetSingleDomainFunc mocks the GetSingleDomain method.
	GetSingleDomainFunc func(domain string) (mailgun.Domain, []mailgun.DNSRecord, []mailgun.DNSRecord, error)

	// GetStatsFunc mocks the GetStats method.
	GetStatsFunc func(limit int, skip int, startDate *time.Time, event ...string) (int, []mailgun.Stat, error)

	// GetStoredMessageFunc mocks the GetStoredMessage method.
	GetStoredMessageFunc func(id string) (mailgun.StoredMessage, error)

	// GetStoredMessageForURLFunc mocks the GetStoredMessageForURL method.
	GetStoredMessageForURLFunc func(url string) (mailgun.StoredMessage, error)

	// GetStoredMessageRawFunc mocks the GetStoredMessageRaw method.
	GetStoredMessageRawFunc func(id string) (mailgun.StoredMessageRaw, error)

	// GetStoredMessageRawForURLFunc mocks the GetStoredMessageRawForURL method.
	GetStoredMessageRawForURLFunc func(url string) (mailgun.StoredMessageRaw, error)

	// GetTagFunc mocks the GetTag method.
	GetTagFunc func(tag string) (mailgun.TagItem, error)

	// GetUnsubscribesFunc mocks the GetUnsubscribes method.
	GetUnsubscribesFunc func(limit int, skip int) (int, []mailgun.Unsubscription, error)

	// GetUnsubscribesByAddressFunc mocks the GetUnsubscribesByAddress method.
	GetUnsubscribesByAddressFunc func(in1 string) (int, []mailgun.Unsubscription, error)

	// GetWebhookByTypeFunc mocks the GetWebhookByType method.
	GetWebhookByTypeFunc func(kind string) (string, error)

	// GetWebhooksFunc mocks the GetWebhooks method.
	GetWebhooksFunc func() (map[string]string, error)

	// ListEventsFunc mocks the ListEvents method.
	ListEventsFunc func(in1 *mailgun.EventsOptions) *mailgun.EventIterator

	// ListTagsFunc mocks the ListTags method.
	ListTagsFunc func(in1 *mailgun.TagOptions) *mailgun.TagIterator

	// NewEventIteratorFunc mocks the NewEventIterator method.
	NewEventIteratorFunc func() *mailgun.EventIterator

	// NewMIMEMessageFunc mocks the NewMIMEMessage method.
	NewMIMEMessageFunc func(body io.ReadCloser, to ...string) *mailgun.Message

	// NewMessageFunc mocks the NewMessage method.
	NewMessageFunc func(from string, subject string, text string, to ...string) *mailgun.Message

	// ParseAddressesFunc mocks the ParseAddresses method.
	ParseAddressesFunc func(addresses ...string) ([]string, []string, error)

	// PollEventsFunc mocks the PollEvents method.
	PollEventsFunc func(in1 *mailgun.EventsOptions) *mailgun.EventPoller

	// PublicApiKeyFunc mocks the PublicApiKey method.
	PublicApiKeyFunc func() string

	// RemoveUnsubscribeFunc mocks the RemoveUnsubscribe method.
	RemoveUnsubscribeFunc func(in1 string) error

	// RemoveUnsubscribeWithTagFunc mocks the RemoveUnsubscribeWithTag method.
	RemoveUnsubscribeWithTagFunc func(a string, t string) error

	// SendFunc mocks the Send method.
	SendFunc func(m *mailgun.Message) (string, string, error)

	// SetAPIBaseFunc mocks the SetAPIBase method.
	SetAPIBaseFunc func(url string)

	// SetClientFunc mocks the SetClient method.
	SetClientFunc func(client *http.Client)

	// UnsubscribeFunc mocks the Unsubscribe method.
	UnsubscribeFunc func(address string, tag string) error

	// UpdateCampaignFunc mocks the UpdateCampaign method.
	UpdateCampaignFunc func(oldId string, name string, newId string) error

	// UpdateListFunc mocks the UpdateList method.
	UpdateListFunc func(in1 string, in2 mailgun.List) (mailgun.List, error)

	// UpdateMemberFunc mocks the UpdateMember method.
	UpdateMemberFunc func(Member string, list string, prototype mailgun.Member) (mailgun.Member, error)

	// UpdateRouteFunc mocks the UpdateRoute method.
	UpdateRouteFunc func(in1 string, in2 mailgun.Route) (mailgun.Route, error)

	// UpdateWebhookFunc mocks the UpdateWebhook method.
	UpdateWebhookFunc func(kind string, url string) error

	// ValidateEmailFunc mocks the ValidateEmail method.
	ValidateEmailFunc func(email string) (mailgun.EmailVerification, error)

	// VerifyWebhookRequestFunc mocks the VerifyWebhookRequest method.
	VerifyWebhookRequestFunc func(req *http.Request) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddBounce holds details about calls to the AddBounce method.
		AddBounce []struct {
			// Address is the address argument value.
			Address string
			// Code is the code argument value.
			Code string
			// Error is the error argument value.
			Error string
		}
		// ApiBase holds details about calls to the ApiBase method.
		ApiBase []struct {
		}
		// ApiKey holds details about calls to the ApiKey method.
		ApiKey []struct {
		}
		// ChangeCredentialPassword holds details about calls to the ChangeCredentialPassword method.
		ChangeCredentialPassword []struct {
			// ID is the id argument value.
			ID string
			// Password is the password argument value.
			Password string
		}
		// Client holds details about calls to the Client method.
		Client []struct {
		}
		// CreateCampaign holds details about calls to the CreateCampaign method.
		CreateCampaign []struct {
			// Name is the name argument value.
			Name string
			// ID is the id argument value.
			ID string
		}
		// CreateComplaint holds details about calls to the CreateComplaint method.
		CreateComplaint []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// CreateCredential holds details about calls to the CreateCredential method.
		CreateCredential []struct {
			// Login is the login argument value.
			Login string
			// Password is the password argument value.
			Password string
		}
		// CreateDomain holds details about calls to the CreateDomain method.
		CreateDomain []struct {
			// Name is the name argument value.
			Name string
			// SmtpPassword is the smtpPassword argument value.
			SmtpPassword string
			// SpamAction is the spamAction argument value.
			SpamAction string
			// Wildcard is the wildcard argument value.
			Wildcard bool
		}
		// CreateList holds details about calls to the CreateList method.
		CreateList []struct {
			// In1 is the in1 argument value.
			In1 mailgun.List
		}
		// CreateMember holds details about calls to the CreateMember method.
		CreateMember []struct {
			// Merge is the merge argument value.
			Merge bool
			// Addr is the addr argument value.
			Addr string
			// Prototype is the prototype argument value.
			Prototype mailgun.Member
		}
		// CreateMemberList holds details about calls to the CreateMemberList method.
		CreateMemberList []struct {
			// Subscribed is the subscribed argument value.
			Subscribed *bool
			// Addr is the addr argument value.
			Addr string
			// NewMembers is the newMembers argument value.
			NewMembers []interface{}
		}
		// CreateRoute holds details about calls to the CreateRoute method.
		CreateRoute []struct {
			// In1 is the in1 argument value.
			In1 mailgun.Route
		}
		// CreateWebhook holds details about calls to the CreateWebhook method.
		CreateWebhook []struct {
			// Kind is the kind argument value.
			Kind string
			// URL is the url argument value.
			URL string
		}
		// DeleteBounce holds details about calls to the DeleteBounce method.
		DeleteBounce []struct {
			// Address is the address argument value.
			Address string
		}
		// DeleteCampaign holds details about calls to the DeleteCampaign method.
		DeleteCampaign []struct {
			// ID is the id argument value.
			ID string
		}
		// DeleteComplaint holds details about calls to the DeleteComplaint method.
		DeleteComplaint []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// DeleteCredential holds details about calls to the DeleteCredential method.
		DeleteCredential []struct {
			// ID is the id argument value.
			ID string
		}
		// DeleteDomain holds details about calls to the DeleteDomain method.
		DeleteDomain []struct {
			// Name is the name argument value.
			Name string
		}
		// DeleteList holds details about calls to the DeleteList method.
		DeleteList []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// DeleteMember holds details about calls to the DeleteMember method.
		DeleteMember []struct {
			// Member is the Member argument value.
			Member string
			// List is the list argument value.
			List string
		}
		// DeleteRoute holds details about calls to the DeleteRoute method.
		DeleteRoute []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// DeleteStoredMessage holds details about calls to the DeleteStoredMessage method.
		DeleteStoredMessage []struct {
			// ID is the id argument value.
			ID string
		}
		// DeleteTag holds details about calls to the DeleteTag method.
		DeleteTag []struct {
			// Tag is the tag argument value.
			Tag string
		}
		// DeleteWebhook holds details about calls to the DeleteWebhook method.
		DeleteWebhook []struct {
			// Kind is the kind argument value.
			Kind string
		}
		// Domain holds details about calls to the Domain method.
		Domain []struct {
		}
		// GetBounces holds details about calls to the GetBounces method.
		GetBounces []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
		}
		// GetCampaigns holds details about calls to the GetCampaigns method.
		GetCampaigns []struct {
		}
		// GetComplaints holds details about calls to the GetComplaints method.
		GetComplaints []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
		}
		// GetCredentials holds details about calls to the GetCredentials method.
		GetCredentials []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
		}
		// GetDomains holds details about calls to the GetDomains method.
		GetDomains []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
		}
		// GetListByAddress holds details about calls to the GetListByAddress method.
		GetListByAddress []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// GetLists holds details about calls to the GetLists method.
		GetLists []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
			// Filter is the filter argument value.
			Filter string
		}
		// GetMemberByAddress holds details about calls to the GetMemberByAddress method.
		GetMemberByAddress []struct {
			// MemberAddr is the MemberAddr argument value.
			MemberAddr string
			// ListAddr is the listAddr argument value.
			ListAddr string
		}
		// GetMembers holds details about calls to the GetMembers method.
		GetMembers []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
			// Subfilter is the subfilter argument value.
			Subfilter *bool
			// Address is the address argument value.
			Address string
		}
		// GetRouteByID holds details about calls to the GetRouteByID method.
		GetRouteByID []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// GetRoutes holds details about calls to the GetRoutes method.
		GetRoutes []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
		}
		// GetSingleBounce holds details about calls to the GetSingleBounce method.
		GetSingleBounce []struct {
			// Address is the address argument value.
			Address string
		}
		// GetSingleComplaint holds details about calls to the GetSingleComplaint method.
		GetSingleComplaint []struct {
			// Address is the address argument value.
			Address string
		}
		// GetSingleDomain holds details about calls to the GetSingleDomain method.
		GetSingleDomain []struct {
			// Domain is the domain argument value.
			Domain string
		}
		// GetStats holds details about calls to the GetStats method.
		GetStats []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
			// StartDate is the startDate argument value.
			StartDate *time.Time
			// Event is the event argument value.
			Event []string
		}
		// GetStoredMessage holds details about calls to the GetStoredMessage method.
		GetStoredMessage []struct {
			// ID is the id argument value.
			ID string
		}
		// GetStoredMessageForURL holds details about calls to the GetStoredMessageForURL method.
		GetStoredMessageForURL []struct {
			// URL is the url argument value.
			URL string
		}
		// GetStoredMessageRaw holds details about calls to the GetStoredMessageRaw method.
		GetStoredMessageRaw []struct {
			// ID is the id argument value.
			ID string
		}
		// GetStoredMessageRawForURL holds details about calls to the GetStoredMessageRawForURL method.
		GetStoredMessageRawForURL []struct {
			// URL is the url argument value.
			URL string
		}
		// GetTag holds details about calls to the GetTag method.
		GetTag []struct {
			// Tag is the tag argument value.
			Tag string
		}
		// GetUnsubscribes holds details about calls to the GetUnsubscribes method.
		GetUnsubscribes []struct {
			// Limit is the limit argument value.
			Limit int
			// Skip is the skip argument value.
			Skip int
		}
		// GetUnsubscribesByAddress holds details about calls to the GetUnsubscribesByAddress method.
		GetUnsubscribesByAddress []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// GetWebhookByType holds details about calls to the GetWebhookByType method.
		GetWebhookByType []struct {
			// Kind is the kind argument value.
			Kind string
		}
		// GetWebhooks holds details about calls to the GetWebhooks method.
		GetWebhooks []struct {
		}
		// ListEvents holds details about calls to the ListEvents method.
		ListEvents []struct {
			// In1 is the in1 argument value.
			In1 *mailgun.EventsOptions
		}
		// ListTags holds details about calls to the ListTags method.
		ListTags []struct {
			// In1 is the in1 argument value.
			In1 *mailgun.TagOptions
		}
		// NewEventIterator holds details about calls to the NewEventIterator method.
		NewEventIterator []struct {
		}
		// NewMIMEMessage holds details about calls to the NewMIMEMessage method.
		NewMIMEMessage []struct {
			// Body is the body argument value.
			Body io.ReadCloser
			// To is the to argument value.
			To []string
		}
		// NewMessage holds details about calls to the NewMessage method.
		NewMessage []struct {
			// From is the from argument value.
			From string
			// Subject is the subject argument value.
			Subject string
			// Text is the text argument value.
			Text string
			// To is the to argument value.
			To []string
		}
		// ParseAddresses holds details about calls to the ParseAddresses method.
		ParseAddresses []struct {
			// Addresses is the addresses argument value.
			Addresses []string
		}
		// PollEvents holds details about calls to the PollEvents method.
		PollEvents []struct {
			// In1 is the in1 argument value.
			In1 *mailgun.EventsOptions
		}
		// PublicApiKey holds details about calls to the PublicApiKey method.
		PublicApiKey []struct {
		}
		// RemoveUnsubscribe holds details about calls to the RemoveUnsubscribe method.
		RemoveUnsubscribe []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// RemoveUnsubscribeWithTag holds details about calls to the RemoveUnsubscribeWithTag method.
		RemoveUnsubscribeWithTag []struct {
			// A is the a argument value.
			A string
			// T is the t argument value.
			T string
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// M is the m argument value.
			M *mailgun.Message
		}
		// SetAPIBase holds details about calls to the SetAPIBase method.
		SetAPIBase []struct {
			// URL is the url argument value.
			URL string
		}
		// SetClient holds details about calls to the SetClient method.
		SetClient []struct {
			// Client is the client argument value.
			Client *http.Client
		}
		// Unsubscribe holds details about calls to the Unsubscribe method.
		Unsubscribe []struct {
			// Address is the address argument value.
			Address string
			// Tag is the tag argument value.
			Tag string
		}
		// UpdateCampaign holds details about calls to the UpdateCampaign method.
		UpdateCampaign []struct {
			// OldId is the oldId argument value.
			OldId string
			// Name is the name argument value.
			Name string
			// NewId is the newId argument value.
			NewId string
		}
		// UpdateList holds details about calls to the UpdateList method.
		UpdateList []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 mailgun.List
		}
		// UpdateMember holds details about calls to the UpdateMember method.
		UpdateMember []struct {
			// Member is the Member argument value.
			Member string
			// List is the list argument value.
			List string
			// Prototype is the prototype argument value.
			Prototype mailgun.Member
		}
		// UpdateRoute holds details about calls to the UpdateRoute method.
		UpdateRoute []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 mailgun.Route
		}
		// UpdateWebhook holds details about calls to the UpdateWebhook method.
		UpdateWebhook []struct {
			// Kind is the kind argument value.
			Kind string
			// URL is the url argument value.
			URL string
		}
		// ValidateEmail holds details about calls to the ValidateEmail method.
		ValidateEmail []struct {
			// Email is the email argument value.
			Email string
		}
		// VerifyWebhookRequest holds details about calls to the VerifyWebhookRequest method.
		VerifyWebhookRequest []struct {
			// Req is the req argument value.
			Req *http.Request
		}
	}
}

// AddBounce calls AddBounceFunc.
func (mock *MailgunMock) AddBounce(address string, code string, error string) error {
	if mock.AddBounceFunc == nil {
		panic("moq: MailgunMock.AddBounceFunc is nil but Mailgun.AddBounce was just called")
	}
	callInfo := struct {
		Address string
		Code    string
		Error   string
	}{
		Address: address,
		Code:    code,
		Error:   error,
	}
	lockMailgunMockAddBounce.Lock()
	mock.calls.AddBounce = append(mock.calls.AddBounce, callInfo)
	lockMailgunMockAddBounce.Unlock()
	return mock.AddBounceFunc(address, code, error)
}

// AddBounceCalls gets all the calls that were made to AddBounce.
// Check the length with:
//     len(mockedMailgun.AddBounceCalls())
func (mock *MailgunMock) AddBounceCalls() []struct {
	Address string
	Code    string
	Error   string
} {
	var calls []struct {
		Address string
		Code    string
		Error   string
	}
	lockMailgunMockAddBounce.RLock()
	calls = mock.calls.AddBounce
	lockMailgunMockAddBounce.RUnlock()
	return calls
}

// ApiBase calls ApiBaseFunc.
func (mock *MailgunMock) ApiBase() string {
	if mock.ApiBaseFunc == nil {
		panic("moq: MailgunMock.ApiBaseFunc is nil but Mailgun.ApiBase was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockApiBase.Lock()
	mock.calls.ApiBase = append(mock.calls.ApiBase, callInfo)
	lockMailgunMockApiBase.Unlock()
	return mock.ApiBaseFunc()
}

// ApiBaseCalls gets all the calls that were made to ApiBase.
// Check the length with:
//     len(mockedMailgun.ApiBaseCalls())
func (mock *MailgunMock) ApiBaseCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockApiBase.RLock()
	calls = mock.calls.ApiBase
	lockMailgunMockApiBase.RUnlock()
	return calls
}

// ApiKey calls ApiKeyFunc.
func (mock *MailgunMock) ApiKey() string {
	if mock.ApiKeyFunc == nil {
		panic("moq: MailgunMock.ApiKeyFunc is nil but Mailgun.ApiKey was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockApiKey.Lock()
	mock.calls.ApiKey = append(mock.calls.ApiKey, callInfo)
	lockMailgunMockApiKey.Unlock()
	return mock.ApiKeyFunc()
}

// ApiKeyCalls gets all the calls that were made to ApiKey.
// Check the length with:
//     len(mockedMailgun.ApiKeyCalls())
func (mock *MailgunMock) ApiKeyCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockApiKey.RLock()
	calls = mock.calls.ApiKey
	lockMailgunMockApiKey.RUnlock()
	return calls
}

// ChangeCredentialPassword calls ChangeCredentialPasswordFunc.
func (mock *MailgunMock) ChangeCredentialPassword(id string, password string) error {
	if mock.ChangeCredentialPasswordFunc == nil {
		panic("moq: MailgunMock.ChangeCredentialPasswordFunc is nil but Mailgun.ChangeCredentialPassword was just called")
	}
	callInfo := struct {
		ID       string
		Password string
	}{
		ID:       id,
		Password: password,
	}
	lockMailgunMockChangeCredentialPassword.Lock()
	mock.calls.ChangeCredentialPassword = append(mock.calls.ChangeCredentialPassword, callInfo)
	lockMailgunMockChangeCredentialPassword.Unlock()
	return mock.ChangeCredentialPasswordFunc(id, password)
}

// ChangeCredentialPasswordCalls gets all the calls that were made to ChangeCredentialPassword.
// Check the length with:
//     len(mockedMailgun.ChangeCredentialPasswordCalls())
func (mock *MailgunMock) ChangeCredentialPasswordCalls() []struct {
	ID       string
	Password string
} {
	var calls []struct {
		ID       string
		Password string
	}
	lockMailgunMockChangeCredentialPassword.RLock()
	calls = mock.calls.ChangeCredentialPassword
	lockMailgunMockChangeCredentialPassword.RUnlock()
	return calls
}

// Client calls ClientFunc.
func (mock *MailgunMock) Client() *http.Client {
	if mock.ClientFunc == nil {
		panic("moq: MailgunMock.ClientFunc is nil but Mailgun.Client was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockClient.Lock()
	mock.calls.Client = append(mock.calls.Client, callInfo)
	lockMailgunMockClient.Unlock()
	return mock.ClientFunc()
}

// ClientCalls gets all the calls that were made to Client.
// Check the length with:
//     len(mockedMailgun.ClientCalls())
func (mock *MailgunMock) ClientCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockClient.RLock()
	calls = mock.calls.Client
	lockMailgunMockClient.RUnlock()
	return calls
}

// CreateCampaign calls CreateCampaignFunc.
func (mock *MailgunMock) CreateCampaign(name string, id string) error {
	if mock.CreateCampaignFunc == nil {
		panic("moq: MailgunMock.CreateCampaignFunc is nil but Mailgun.CreateCampaign was just called")
	}
	callInfo := struct {
		Name string
		ID   string
	}{
		Name: name,
		ID:   id,
	}
	lockMailgunMockCreateCampaign.Lock()
	mock.calls.CreateCampaign = append(mock.calls.CreateCampaign, callInfo)
	lockMailgunMockCreateCampaign.Unlock()
	return mock.CreateCampaignFunc(name, id)
}

// CreateCampaignCalls gets all the calls that were made to CreateCampaign.
// Check the length with:
//     len(mockedMailgun.CreateCampaignCalls())
func (mock *MailgunMock) CreateCampaignCalls() []struct {
	Name string
	ID   string
} {
	var calls []struct {
		Name string
		ID   string
	}
	lockMailgunMockCreateCampaign.RLock()
	calls = mock.calls.CreateCampaign
	lockMailgunMockCreateCampaign.RUnlock()
	return calls
}

// CreateComplaint calls CreateComplaintFunc.
func (mock *MailgunMock) CreateComplaint(in1 string) error {
	if mock.CreateComplaintFunc == nil {
		panic("moq: MailgunMock.CreateComplaintFunc is nil but Mailgun.CreateComplaint was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockCreateComplaint.Lock()
	mock.calls.CreateComplaint = append(mock.calls.CreateComplaint, callInfo)
	lockMailgunMockCreateComplaint.Unlock()
	return mock.CreateComplaintFunc(in1)
}

// CreateComplaintCalls gets all the calls that were made to CreateComplaint.
// Check the length with:
//     len(mockedMailgun.CreateComplaintCalls())
func (mock *MailgunMock) CreateComplaintCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockCreateComplaint.RLock()
	calls = mock.calls.CreateComplaint
	lockMailgunMockCreateComplaint.RUnlock()
	return calls
}

// CreateCredential calls CreateCredentialFunc.
func (mock *MailgunMock) CreateCredential(login string, password string) error {
	if mock.CreateCredentialFunc == nil {
		panic("moq: MailgunMock.CreateCredentialFunc is nil but Mailgun.CreateCredential was just called")
	}
	callInfo := struct {
		Login    string
		Password string
	}{
		Login:    login,
		Password: password,
	}
	lockMailgunMockCreateCredential.Lock()
	mock.calls.CreateCredential = append(mock.calls.CreateCredential, callInfo)
	lockMailgunMockCreateCredential.Unlock()
	return mock.CreateCredentialFunc(login, password)
}

// CreateCredentialCalls gets all the calls that were made to CreateCredential.
// Check the length with:
//     len(mockedMailgun.CreateCredentialCalls())
func (mock *MailgunMock) CreateCredentialCalls() []struct {
	Login    string
	Password string
} {
	var calls []struct {
		Login    string
		Password string
	}
	lockMailgunMockCreateCredential.RLock()
	calls = mock.calls.CreateCredential
	lockMailgunMockCreateCredential.RUnlock()
	return calls
}

// CreateDomain calls CreateDomainFunc.
func (mock *MailgunMock) CreateDomain(name string, smtpPassword string, spamAction string, wildcard bool) error {
	if mock.CreateDomainFunc == nil {
		panic("moq: MailgunMock.CreateDomainFunc is nil but Mailgun.CreateDomain was just called")
	}
	callInfo := struct {
		Name         string
		SmtpPassword string
		SpamAction   string
		Wildcard     bool
	}{
		Name:         name,
		SmtpPassword: smtpPassword,
		SpamAction:   spamAction,
		Wildcard:     wildcard,
	}
	lockMailgunMockCreateDomain.Lock()
	mock.calls.CreateDomain = append(mock.calls.CreateDomain, callInfo)
	lockMailgunMockCreateDomain.Unlock()
	return mock.CreateDomainFunc(name, smtpPassword, spamAction, wildcard)
}

// CreateDomainCalls gets all the calls that were made to CreateDomain.
// Check the length with:
//     len(mockedMailgun.CreateDomainCalls())
func (mock *MailgunMock) CreateDomainCalls() []struct {
	Name         string
	SmtpPassword string
	SpamAction   string
	Wildcard     bool
} {
	var calls []struct {
		Name         string
		SmtpPassword string
		SpamAction   string
		Wildcard     bool
	}
	lockMailgunMockCreateDomain.RLock()
	calls = mock.calls.CreateDomain
	lockMailgunMockCreateDomain.RUnlock()
	return calls
}

// CreateList calls CreateListFunc.
func (mock *MailgunMock) CreateList(in1 mailgun.List) (mailgun.List, error) {
	if mock.CreateListFunc == nil {
		panic("moq: MailgunMock.CreateListFunc is nil but Mailgun.CreateList was just called")
	}
	callInfo := struct {
		In1 mailgun.List
	}{
		In1: in1,
	}
	lockMailgunMockCreateList.Lock()
	mock.calls.CreateList = append(mock.calls.CreateList, callInfo)
	lockMailgunMockCreateList.Unlock()
	return mock.CreateListFunc(in1)
}

// CreateListCalls gets all the calls that were made to CreateList.
// Check the length with:
//     len(mockedMailgun.CreateListCalls())
func (mock *MailgunMock) CreateListCalls() []struct {
	In1 mailgun.List
} {
	var calls []struct {
		In1 mailgun.List
	}
	lockMailgunMockCreateList.RLock()
	calls = mock.calls.CreateList
	lockMailgunMockCreateList.RUnlock()
	return calls
}

// CreateMember calls CreateMemberFunc.
func (mock *MailgunMock) CreateMember(merge bool, addr string, prototype mailgun.Member) error {
	if mock.CreateMemberFunc == nil {
		panic("moq: MailgunMock.CreateMemberFunc is nil but Mailgun.CreateMember was just called")
	}
	callInfo := struct {
		Merge     bool
		Addr      string
		Prototype mailgun.Member
	}{
		Merge:     merge,
		Addr:      addr,
		Prototype: prototype,
	}
	lockMailgunMockCreateMember.Lock()
	mock.calls.CreateMember = append(mock.calls.CreateMember, callInfo)
	lockMailgunMockCreateMember.Unlock()
	return mock.CreateMemberFunc(merge, addr, prototype)
}

// CreateMemberCalls gets all the calls that were made to CreateMember.
// Check the length with:
//     len(mockedMailgun.CreateMemberCalls())
func (mock *MailgunMock) CreateMemberCalls() []struct {
	Merge     bool
	Addr      string
	Prototype mailgun.Member
} {
	var calls []struct {
		Merge     bool
		Addr      string
		Prototype mailgun.Member
	}
	lockMailgunMockCreateMember.RLock()
	calls = mock.calls.CreateMember
	lockMailgunMockCreateMember.RUnlock()
	return calls
}

// CreateMemberList calls CreateMemberListFunc.
func (mock *MailgunMock) CreateMemberList(subscribed *bool, addr string, newMembers []interface{}) error {
	if mock.CreateMemberListFunc == nil {
		panic("moq: MailgunMock.CreateMemberListFunc is nil but Mailgun.CreateMemberList was just called")
	}
	callInfo := struct {
		Subscribed *bool
		Addr       string
		NewMembers []interface{}
	}{
		Subscribed: subscribed,
		Addr:       addr,
		NewMembers: newMembers,
	}
	lockMailgunMockCreateMemberList.Lock()
	mock.calls.CreateMemberList = append(mock.calls.CreateMemberList, callInfo)
	lockMailgunMockCreateMemberList.Unlock()
	return mock.CreateMemberListFunc(subscribed, addr, newMembers)
}

// CreateMemberListCalls gets all the calls that were made to CreateMemberList.
// Check the length with:
//     len(mockedMailgun.CreateMemberListCalls())
func (mock *MailgunMock) CreateMemberListCalls() []struct {
	Subscribed *bool
	Addr       string
	NewMembers []interface{}
} {
	var calls []struct {
		Subscribed *bool
		Addr       string
		NewMembers []interface{}
	}
	lockMailgunMockCreateMemberList.RLock()
	calls = mock.calls.CreateMemberList
	lockMailgunMockCreateMemberList.RUnlock()
	return calls
}

// CreateRoute calls CreateRouteFunc.
func (mock *MailgunMock) CreateRoute(in1 mailgun.Route) (mailgun.Route, error) {
	if mock.CreateRouteFunc == nil {
		panic("moq: MailgunMock.CreateRouteFunc is nil but Mailgun.CreateRoute was just called")
	}
	callInfo := struct {
		In1 mailgun.Route
	}{
		In1: in1,
	}
	lockMailgunMockCreateRoute.Lock()
	mock.calls.CreateRoute = append(mock.calls.CreateRoute, callInfo)
	lockMailgunMockCreateRoute.Unlock()
	return mock.CreateRouteFunc(in1)
}

// CreateRouteCalls gets all the calls that were made to CreateRoute.
// Check the length with:
//     len(mockedMailgun.CreateRouteCalls())
func (mock *MailgunMock) CreateRouteCalls() []struct {
	In1 mailgun.Route
} {
	var calls []struct {
		In1 mailgun.Route
	}
	lockMailgunMockCreateRoute.RLock()
	calls = mock.calls.CreateRoute
	lockMailgunMockCreateRoute.RUnlock()
	return calls
}

// CreateWebhook calls CreateWebhookFunc.
func (mock *MailgunMock) CreateWebhook(kind string, url string) error {
	if mock.CreateWebhookFunc == nil {
		panic("moq: MailgunMock.CreateWebhookFunc is nil but Mailgun.CreateWebhook was just called")
	}
	callInfo := struct {
		Kind string
		URL  string
	}{
		Kind: kind,
		URL:  url,
	}
	lockMailgunMockCreateWebhook.Lock()
	mock.calls.CreateWebhook = append(mock.calls.CreateWebhook, callInfo)
	lockMailgunMockCreateWebhook.Unlock()
	return mock.CreateWebhookFunc(kind, url)
}

// CreateWebhookCalls gets all the calls that were made to CreateWebhook.
// Check the length with:
//     len(mockedMailgun.CreateWebhookCalls())
func (mock *MailgunMock) CreateWebhookCalls() []struct {
	Kind string
	URL  string
} {
	var calls []struct {
		Kind string
		URL  string
	}
	lockMailgunMockCreateWebhook.RLock()
	calls = mock.calls.CreateWebhook
	lockMailgunMockCreateWebhook.RUnlock()
	return calls
}

// DeleteBounce calls DeleteBounceFunc.
func (mock *MailgunMock) DeleteBounce(address string) error {
	if mock.DeleteBounceFunc == nil {
		panic("moq: MailgunMock.DeleteBounceFunc is nil but Mailgun.DeleteBounce was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	lockMailgunMockDeleteBounce.Lock()
	mock.calls.DeleteBounce = append(mock.calls.DeleteBounce, callInfo)
	lockMailgunMockDeleteBounce.Unlock()
	return mock.DeleteBounceFunc(address)
}

// DeleteBounceCalls gets all the calls that were made to DeleteBounce.
// Check the length with:
//     len(mockedMailgun.DeleteBounceCalls())
func (mock *MailgunMock) DeleteBounceCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	lockMailgunMockDeleteBounce.RLock()
	calls = mock.calls.DeleteBounce
	lockMailgunMockDeleteBounce.RUnlock()
	return calls
}

// DeleteCampaign calls DeleteCampaignFunc.
func (mock *MailgunMock) DeleteCampaign(id string) error {
	if mock.DeleteCampaignFunc == nil {
		panic("moq: MailgunMock.DeleteCampaignFunc is nil but Mailgun.DeleteCampaign was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockMailgunMockDeleteCampaign.Lock()
	mock.calls.DeleteCampaign = append(mock.calls.DeleteCampaign, callInfo)
	lockMailgunMockDeleteCampaign.Unlock()
	return mock.DeleteCampaignFunc(id)
}

// DeleteCampaignCalls gets all the calls that were made to DeleteCampaign.
// Check the length with:
//     len(mockedMailgun.DeleteCampaignCalls())
func (mock *MailgunMock) DeleteCampaignCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockMailgunMockDeleteCampaign.RLock()
	calls = mock.calls.DeleteCampaign
	lockMailgunMockDeleteCampaign.RUnlock()
	return calls
}

// DeleteComplaint calls DeleteComplaintFunc.
func (mock *MailgunMock) DeleteComplaint(in1 string) error {
	if mock.DeleteComplaintFunc == nil {
		panic("moq: MailgunMock.DeleteComplaintFunc is nil but Mailgun.DeleteComplaint was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockDeleteComplaint.Lock()
	mock.calls.DeleteComplaint = append(mock.calls.DeleteComplaint, callInfo)
	lockMailgunMockDeleteComplaint.Unlock()
	return mock.DeleteComplaintFunc(in1)
}

// DeleteComplaintCalls gets all the calls that were made to DeleteComplaint.
// Check the length with:
//     len(mockedMailgun.DeleteComplaintCalls())
func (mock *MailgunMock) DeleteComplaintCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockDeleteComplaint.RLock()
	calls = mock.calls.DeleteComplaint
	lockMailgunMockDeleteComplaint.RUnlock()
	return calls
}

// DeleteCredential calls DeleteCredentialFunc.
func (mock *MailgunMock) DeleteCredential(id string) error {
	if mock.DeleteCredentialFunc == nil {
		panic("moq: MailgunMock.DeleteCredentialFunc is nil but Mailgun.DeleteCredential was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockMailgunMockDeleteCredential.Lock()
	mock.calls.DeleteCredential = append(mock.calls.DeleteCredential, callInfo)
	lockMailgunMockDeleteCredential.Unlock()
	return mock.DeleteCredentialFunc(id)
}

// DeleteCredentialCalls gets all the calls that were made to DeleteCredential.
// Check the length with:
//     len(mockedMailgun.DeleteCredentialCalls())
func (mock *MailgunMock) DeleteCredentialCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockMailgunMockDeleteCredential.RLock()
	calls = mock.calls.DeleteCredential
	lockMailgunMockDeleteCredential.RUnlock()
	return calls
}

// DeleteDomain calls DeleteDomainFunc.
func (mock *MailgunMock) DeleteDomain(name string) error {
	if mock.DeleteDomainFunc == nil {
		panic("moq: MailgunMock.DeleteDomainFunc is nil but Mailgun.DeleteDomain was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockMailgunMockDeleteDomain.Lock()
	mock.calls.DeleteDomain = append(mock.calls.DeleteDomain, callInfo)
	lockMailgunMockDeleteDomain.Unlock()
	return mock.DeleteDomainFunc(name)
}

// DeleteDomainCalls gets all the calls that were made to DeleteDomain.
// Check the length with:
//     len(mockedMailgun.DeleteDomainCalls())
func (mock *MailgunMock) DeleteDomainCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockMailgunMockDeleteDomain.RLock()
	calls = mock.calls.DeleteDomain
	lockMailgunMockDeleteDomain.RUnlock()
	return calls
}

// DeleteList calls DeleteListFunc.
func (mock *MailgunMock) DeleteList(in1 string) error {
	if mock.DeleteListFunc == nil {
		panic("moq: MailgunMock.DeleteListFunc is nil but Mailgun.DeleteList was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockDeleteList.Lock()
	mock.calls.DeleteList = append(mock.calls.DeleteList, callInfo)
	lockMailgunMockDeleteList.Unlock()
	return mock.DeleteListFunc(in1)
}

// DeleteListCalls gets all the calls that were made to DeleteList.
// Check the length with:
//     len(mockedMailgun.DeleteListCalls())
func (mock *MailgunMock) DeleteListCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockDeleteList.RLock()
	calls = mock.calls.DeleteList
	lockMailgunMockDeleteList.RUnlock()
	return calls
}

// DeleteMember calls DeleteMemberFunc.
func (mock *MailgunMock) DeleteMember(Member string, list string) error {
	if mock.DeleteMemberFunc == nil {
		panic("moq: MailgunMock.DeleteMemberFunc is nil but Mailgun.DeleteMember was just called")
	}
	callInfo := struct {
		Member string
		List   string
	}{
		Member: Member,
		List:   list,
	}
	lockMailgunMockDeleteMember.Lock()
	mock.calls.DeleteMember = append(mock.calls.DeleteMember, callInfo)
	lockMailgunMockDeleteMember.Unlock()
	return mock.DeleteMemberFunc(Member, list)
}

// DeleteMemberCalls gets all the calls that were made to DeleteMember.
// Check the length with:
//     len(mockedMailgun.DeleteMemberCalls())
func (mock *MailgunMock) DeleteMemberCalls() []struct {
	Member string
	List   string
} {
	var calls []struct {
		Member string
		List   string
	}
	lockMailgunMockDeleteMember.RLock()
	calls = mock.calls.DeleteMember
	lockMailgunMockDeleteMember.RUnlock()
	return calls
}

// DeleteRoute calls DeleteRouteFunc.
func (mock *MailgunMock) DeleteRoute(in1 string) error {
	if mock.DeleteRouteFunc == nil {
		panic("moq: MailgunMock.DeleteRouteFunc is nil but Mailgun.DeleteRoute was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockDeleteRoute.Lock()
	mock.calls.DeleteRoute = append(mock.calls.DeleteRoute, callInfo)
	lockMailgunMockDeleteRoute.Unlock()
	return mock.DeleteRouteFunc(in1)
}

// DeleteRouteCalls gets all the calls that were made to DeleteRoute.
// Check the length with:
//     len(mockedMailgun.DeleteRouteCalls())
func (mock *MailgunMock) DeleteRouteCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockDeleteRoute.RLock()
	calls = mock.calls.DeleteRoute
	lockMailgunMockDeleteRoute.RUnlock()
	return calls
}

// DeleteStoredMessage calls DeleteStoredMessageFunc.
func (mock *MailgunMock) DeleteStoredMessage(id string) error {
	if mock.DeleteStoredMessageFunc == nil {
		panic("moq: MailgunMock.DeleteStoredMessageFunc is nil but Mailgun.DeleteStoredMessage was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockMailgunMockDeleteStoredMessage.Lock()
	mock.calls.DeleteStoredMessage = append(mock.calls.DeleteStoredMessage, callInfo)
	lockMailgunMockDeleteStoredMessage.Unlock()
	return mock.DeleteStoredMessageFunc(id)
}

// DeleteStoredMessageCalls gets all the calls that were made to DeleteStoredMessage.
// Check the length with:
//     len(mockedMailgun.DeleteStoredMessageCalls())
func (mock *MailgunMock) DeleteStoredMessageCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockMailgunMockDeleteStoredMessage.RLock()
	calls = mock.calls.DeleteStoredMessage
	lockMailgunMockDeleteStoredMessage.RUnlock()
	return calls
}

// DeleteTag calls DeleteTagFunc.
func (mock *MailgunMock) DeleteTag(tag string) error {
	if mock.DeleteTagFunc == nil {
		panic("moq: MailgunMock.DeleteTagFunc is nil but Mailgun.DeleteTag was just called")
	}
	callInfo := struct {
		Tag string
	}{
		Tag: tag,
	}
	lockMailgunMockDeleteTag.Lock()
	mock.calls.DeleteTag = append(mock.calls.DeleteTag, callInfo)
	lockMailgunMockDeleteTag.Unlock()
	return mock.DeleteTagFunc(tag)
}

// DeleteTagCalls gets all the calls that were made to DeleteTag.
// Check the length with:
//     len(mockedMailgun.DeleteTagCalls())
func (mock *MailgunMock) DeleteTagCalls() []struct {
	Tag string
} {
	var calls []struct {
		Tag string
	}
	lockMailgunMockDeleteTag.RLock()
	calls = mock.calls.DeleteTag
	lockMailgunMockDeleteTag.RUnlock()
	return calls
}

// DeleteWebhook calls DeleteWebhookFunc.
func (mock *MailgunMock) DeleteWebhook(kind string) error {
	if mock.DeleteWebhookFunc == nil {
		panic("moq: MailgunMock.DeleteWebhookFunc is nil but Mailgun.DeleteWebhook was just called")
	}
	callInfo := struct {
		Kind string
	}{
		Kind: kind,
	}
	lockMailgunMockDeleteWebhook.Lock()
	mock.calls.DeleteWebhook = append(mock.calls.DeleteWebhook, callInfo)
	lockMailgunMockDeleteWebhook.Unlock()
	return mock.DeleteWebhookFunc(kind)
}

// DeleteWebhookCalls gets all the calls that were made to DeleteWebhook.
// Check the length with:
//     len(mockedMailgun.DeleteWebhookCalls())
func (mock *MailgunMock) DeleteWebhookCalls() []struct {
	Kind string
} {
	var calls []struct {
		Kind string
	}
	lockMailgunMockDeleteWebhook.RLock()
	calls = mock.calls.DeleteWebhook
	lockMailgunMockDeleteWebhook.RUnlock()
	return calls
}

// Domain calls DomainFunc.
func (mock *MailgunMock) Domain() string {
	if mock.DomainFunc == nil {
		panic("moq: MailgunMock.DomainFunc is nil but Mailgun.Domain was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockDomain.Lock()
	mock.calls.Domain = append(mock.calls.Domain, callInfo)
	lockMailgunMockDomain.Unlock()
	return mock.DomainFunc()
}

// DomainCalls gets all the calls that were made to Domain.
// Check the length with:
//     len(mockedMailgun.DomainCalls())
func (mock *MailgunMock) DomainCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockDomain.RLock()
	calls = mock.calls.Domain
	lockMailgunMockDomain.RUnlock()
	return calls
}

// GetBounces calls GetBouncesFunc.
func (mock *MailgunMock) GetBounces(limit int, skip int) (int, []mailgun.Bounce, error) {
	if mock.GetBouncesFunc == nil {
		panic("moq: MailgunMock.GetBouncesFunc is nil but Mailgun.GetBounces was just called")
	}
	callInfo := struct {
		Limit int
		Skip  int
	}{
		Limit: limit,
		Skip:  skip,
	}
	lockMailgunMockGetBounces.Lock()
	mock.calls.GetBounces = append(mock.calls.GetBounces, callInfo)
	lockMailgunMockGetBounces.Unlock()
	return mock.GetBouncesFunc(limit, skip)
}

// GetBouncesCalls gets all the calls that were made to GetBounces.
// Check the length with:
//     len(mockedMailgun.GetBouncesCalls())
func (mock *MailgunMock) GetBouncesCalls() []struct {
	Limit int
	Skip  int
} {
	var calls []struct {
		Limit int
		Skip  int
	}
	lockMailgunMockGetBounces.RLock()
	calls = mock.calls.GetBounces
	lockMailgunMockGetBounces.RUnlock()
	return calls
}

// GetCampaigns calls GetCampaignsFunc.
func (mock *MailgunMock) GetCampaigns() (int, []mailgun.Campaign, error) {
	if mock.GetCampaignsFunc == nil {
		panic("moq: MailgunMock.GetCampaignsFunc is nil but Mailgun.GetCampaigns was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockGetCampaigns.Lock()
	mock.calls.GetCampaigns = append(mock.calls.GetCampaigns, callInfo)
	lockMailgunMockGetCampaigns.Unlock()
	return mock.GetCampaignsFunc()
}

// GetCampaignsCalls gets all the calls that were made to GetCampaigns.
// Check the length with:
//     len(mockedMailgun.GetCampaignsCalls())
func (mock *MailgunMock) GetCampaignsCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockGetCampaigns.RLock()
	calls = mock.calls.GetCampaigns
	lockMailgunMockGetCampaigns.RUnlock()
	return calls
}

// GetComplaints calls GetComplaintsFunc.
func (mock *MailgunMock) GetComplaints(limit int, skip int) (int, []mailgun.Complaint, error) {
	if mock.GetComplaintsFunc == nil {
		panic("moq: MailgunMock.GetComplaintsFunc is nil but Mailgun.GetComplaints was just called")
	}
	callInfo := struct {
		Limit int
		Skip  int
	}{
		Limit: limit,
		Skip:  skip,
	}
	lockMailgunMockGetComplaints.Lock()
	mock.calls.GetComplaints = append(mock.calls.GetComplaints, callInfo)
	lockMailgunMockGetComplaints.Unlock()
	return mock.GetComplaintsFunc(limit, skip)
}

// GetComplaintsCalls gets all the calls that were made to GetComplaints.
// Check the length with:
//     len(mockedMailgun.GetComplaintsCalls())
func (mock *MailgunMock) GetComplaintsCalls() []struct {
	Limit int
	Skip  int
} {
	var calls []struct {
		Limit int
		Skip  int
	}
	lockMailgunMockGetComplaints.RLock()
	calls = mock.calls.GetComplaints
	lockMailgunMockGetComplaints.RUnlock()
	return calls
}

// GetCredentials calls GetCredentialsFunc.
func (mock *MailgunMock) GetCredentials(limit int, skip int) (int, []mailgun.Credential, error) {
	if mock.GetCredentialsFunc == nil {
		panic("moq: MailgunMock.GetCredentialsFunc is nil but Mailgun.GetCredentials was just called")
	}
	callInfo := struct {
		Limit int
		Skip  int
	}{
		Limit: limit,
		Skip:  skip,
	}
	lockMailgunMockGetCredentials.Lock()
	mock.calls.GetCredentials = append(mock.calls.GetCredentials, callInfo)
	lockMailgunMockGetCredentials.Unlock()
	return mock.GetCredentialsFunc(limit, skip)
}

// GetCredentialsCalls gets all the calls that were made to GetCredentials.
// Check the length with:
//     len(mockedMailgun.GetCredentialsCalls())
func (mock *MailgunMock) GetCredentialsCalls() []struct {
	Limit int
	Skip  int
} {
	var calls []struct {
		Limit int
		Skip  int
	}
	lockMailgunMockGetCredentials.RLock()
	calls = mock.calls.GetCredentials
	lockMailgunMockGetCredentials.RUnlock()
	return calls
}

// GetDomains calls GetDomainsFunc.
func (mock *MailgunMock) GetDomains(limit int, skip int) (int, []mailgun.Domain, error) {
	if mock.GetDomainsFunc == nil {
		panic("moq: MailgunMock.GetDomainsFunc is nil but Mailgun.GetDomains was just called")
	}
	callInfo := struct {
		Limit int
		Skip  int
	}{
		Limit: limit,
		Skip:  skip,
	}
	lockMailgunMockGetDomains.Lock()
	mock.calls.GetDomains = append(mock.calls.GetDomains, callInfo)
	lockMailgunMockGetDomains.Unlock()
	return mock.GetDomainsFunc(limit, skip)
}

// GetDomainsCalls gets all the calls that were made to GetDomains.
// Check the length with:
//     len(mockedMailgun.GetDomainsCalls())
func (mock *MailgunMock) GetDomainsCalls() []struct {
	Limit int
	Skip  int
} {
	var calls []struct {
		Limit int
		Skip  int
	}
	lockMailgunMockGetDomains.RLock()
	calls = mock.calls.GetDomains
	lockMailgunMockGetDomains.RUnlock()
	return calls
}

// GetListByAddress calls GetListByAddressFunc.
func (mock *MailgunMock) GetListByAddress(in1 string) (mailgun.List, error) {
	if mock.GetListByAddressFunc == nil {
		panic("moq: MailgunMock.GetListByAddressFunc is nil but Mailgun.GetListByAddress was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockGetListByAddress.Lock()
	mock.calls.GetListByAddress = append(mock.calls.GetListByAddress, callInfo)
	lockMailgunMockGetListByAddress.Unlock()
	return mock.GetListByAddressFunc(in1)
}

// GetListByAddressCalls gets all the calls that were made to GetListByAddress.
// Check the length with:
//     len(mockedMailgun.GetListByAddressCalls())
func (mock *MailgunMock) GetListByAddressCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockGetListByAddress.RLock()
	calls = mock.calls.GetListByAddress
	lockMailgunMockGetListByAddress.RUnlock()
	return calls
}

// GetLists calls GetListsFunc.
func (mock *MailgunMock) GetLists(limit int, skip int, filter string) (int, []mailgun.List, error) {
	if mock.GetListsFunc == nil {
		panic("moq: MailgunMock.GetListsFunc is nil but Mailgun.GetLists was just called")
	}
	callInfo := struct {
		Limit  int
		Skip   int
		Filter string
	}{
		Limit:  limit,
		Skip:   skip,
		Filter: filter,
	}
	lockMailgunMockGetLists.Lock()
	mock.calls.GetLists = append(mock.calls.GetLists, callInfo)
	lockMailgunMockGetLists.Unlock()
	return mock.GetListsFunc(limit, skip, filter)
}

// GetListsCalls gets all the calls that were made to GetLists.
// Check the length with:
//     len(mockedMailgun.GetListsCalls())
func (mock *MailgunMock) GetListsCalls() []struct {
	Limit  int
	Skip   int
	Filter string
} {
	var calls []struct {
		Limit  int
		Skip   int
		Filter string
	}
	lockMailgunMockGetLists.RLock()
	calls = mock.calls.GetLists
	lockMailgunMockGetLists.RUnlock()
	return calls
}

// GetMemberByAddress calls GetMemberByAddressFunc.
func (mock *MailgunMock) GetMemberByAddress(MemberAddr string, listAddr string) (mailgun.Member, error) {
	if mock.GetMemberByAddressFunc == nil {
		panic("moq: MailgunMock.GetMemberByAddressFunc is nil but Mailgun.GetMemberByAddress was just called")
	}
	callInfo := struct {
		MemberAddr string
		ListAddr   string
	}{
		MemberAddr: MemberAddr,
		ListAddr:   listAddr,
	}
	lockMailgunMockGetMemberByAddress.Lock()
	mock.calls.GetMemberByAddress = append(mock.calls.GetMemberByAddress, callInfo)
	lockMailgunMockGetMemberByAddress.Unlock()
	return mock.GetMemberByAddressFunc(MemberAddr, listAddr)
}

// GetMemberByAddressCalls gets all the calls that were made to GetMemberByAddress.
// Check the length with:
//     len(mockedMailgun.GetMemberByAddressCalls())
func (mock *MailgunMock) GetMemberByAddressCalls() []struct {
	MemberAddr string
	ListAddr   string
} {
	var calls []struct {
		MemberAddr string
		ListAddr   string
	}
	lockMailgunMockGetMemberByAddress.RLock()
	calls = mock.calls.GetMemberByAddress
	lockMailgunMockGetMemberByAddress.RUnlock()
	return calls
}

// GetMembers calls GetMembersFunc.
func (mock *MailgunMock) GetMembers(limit int, skip int, subfilter *bool, address string) (int, []mailgun.Member, error) {
	if mock.GetMembersFunc == nil {
		panic("moq: MailgunMock.GetMembersFunc is nil but Mailgun.GetMembers was just called")
	}
	callInfo := struct {
		Limit     int
		Skip      int
		Subfilter *bool
		Address   string
	}{
		Limit:     limit,
		Skip:      skip,
		Subfilter: subfilter,
		Address:   address,
	}
	lockMailgunMockGetMembers.Lock()
	mock.calls.GetMembers = append(mock.calls.GetMembers, callInfo)
	lockMailgunMockGetMembers.Unlock()
	return mock.GetMembersFunc(limit, skip, subfilter, address)
}

// GetMembersCalls gets all the calls that were made to GetMembers.
// Check the length with:
//     len(mockedMailgun.GetMembersCalls())
func (mock *MailgunMock) GetMembersCalls() []struct {
	Limit     int
	Skip      int
	Subfilter *bool
	Address   string
} {
	var calls []struct {
		Limit     int
		Skip      int
		Subfilter *bool
		Address   string
	}
	lockMailgunMockGetMembers.RLock()
	calls = mock.calls.GetMembers
	lockMailgunMockGetMembers.RUnlock()
	return calls
}

// GetRouteByID calls GetRouteByIDFunc.
func (mock *MailgunMock) GetRouteByID(in1 string) (mailgun.Route, error) {
	if mock.GetRouteByIDFunc == nil {
		panic("moq: MailgunMock.GetRouteByIDFunc is nil but Mailgun.GetRouteByID was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockGetRouteByID.Lock()
	mock.calls.GetRouteByID = append(mock.calls.GetRouteByID, callInfo)
	lockMailgunMockGetRouteByID.Unlock()
	return mock.GetRouteByIDFunc(in1)
}

// GetRouteByIDCalls gets all the calls that were made to GetRouteByID.
// Check the length with:
//     len(mockedMailgun.GetRouteByIDCalls())
func (mock *MailgunMock) GetRouteByIDCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockGetRouteByID.RLock()
	calls = mock.calls.GetRouteByID
	lockMailgunMockGetRouteByID.RUnlock()
	return calls
}

// GetRoutes calls GetRoutesFunc.
func (mock *MailgunMock) GetRoutes(limit int, skip int) (int, []mailgun.Route, error) {
	if mock.GetRoutesFunc == nil {
		panic("moq: MailgunMock.GetRoutesFunc is nil but Mailgun.GetRoutes was just called")
	}
	callInfo := struct {
		Limit int
		Skip  int
	}{
		Limit: limit,
		Skip:  skip,
	}
	lockMailgunMockGetRoutes.Lock()
	mock.calls.GetRoutes = append(mock.calls.GetRoutes, callInfo)
	lockMailgunMockGetRoutes.Unlock()
	return mock.GetRoutesFunc(limit, skip)
}

// GetRoutesCalls gets all the calls that were made to GetRoutes.
// Check the length with:
//     len(mockedMailgun.GetRoutesCalls())
func (mock *MailgunMock) GetRoutesCalls() []struct {
	Limit int
	Skip  int
} {
	var calls []struct {
		Limit int
		Skip  int
	}
	lockMailgunMockGetRoutes.RLock()
	calls = mock.calls.GetRoutes
	lockMailgunMockGetRoutes.RUnlock()
	return calls
}

// GetSingleBounce calls GetSingleBounceFunc.
func (mock *MailgunMock) GetSingleBounce(address string) (mailgun.Bounce, error) {
	if mock.GetSingleBounceFunc == nil {
		panic("moq: MailgunMock.GetSingleBounceFunc is nil but Mailgun.GetSingleBounce was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	lockMailgunMockGetSingleBounce.Lock()
	mock.calls.GetSingleBounce = append(mock.calls.GetSingleBounce, callInfo)
	lockMailgunMockGetSingleBounce.Unlock()
	return mock.GetSingleBounceFunc(address)
}

// GetSingleBounceCalls gets all the calls that were made to GetSingleBounce.
// Check the length with:
//     len(mockedMailgun.GetSingleBounceCalls())
func (mock *MailgunMock) GetSingleBounceCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	lockMailgunMockGetSingleBounce.RLock()
	calls = mock.calls.GetSingleBounce
	lockMailgunMockGetSingleBounce.RUnlock()
	return calls
}

// GetSingleComplaint calls GetSingleComplaintFunc.
func (mock *MailgunMock) GetSingleComplaint(address string) (mailgun.Complaint, error) {
	if mock.GetSingleComplaintFunc == nil {
		panic("moq: MailgunMock.GetSingleComplaintFunc is nil but Mailgun.GetSingleComplaint was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	lockMailgunMockGetSingleComplaint.Lock()
	mock.calls.GetSingleComplaint = append(mock.calls.GetSingleComplaint, callInfo)
	lockMailgunMockGetSingleComplaint.Unlock()
	return mock.GetSingleComplaintFunc(address)
}

// GetSingleComplaintCalls gets all the calls that were made to GetSingleComplaint.
// Check the length with:
//     len(mockedMailgun.GetSingleComplaintCalls())
func (mock *MailgunMock) GetSingleComplaintCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	lockMailgunMockGetSingleComplaint.RLock()
	calls = mock.calls.GetSingleComplaint
	lockMailgunMockGetSingleComplaint.RUnlock()
	return calls
}

// GetSingleDomain calls GetSingleDomainFunc.
func (mock *MailgunMock) GetSingleDomain(domain string) (mailgun.Domain, []mailgun.DNSRecord, []mailgun.DNSRecord, error) {
	if mock.GetSingleDomainFunc == nil {
		panic("moq: MailgunMock.GetSingleDomainFunc is nil but Mailgun.GetSingleDomain was just called")
	}
	callInfo := struct {
		Domain string
	}{
		Domain: domain,
	}
	lockMailgunMockGetSingleDomain.Lock()
	mock.calls.GetSingleDomain = append(mock.calls.GetSingleDomain, callInfo)
	lockMailgunMockGetSingleDomain.Unlock()
	return mock.GetSingleDomainFunc(domain)
}

// GetSingleDomainCalls gets all the calls that were made to GetSingleDomain.
// Check the length with:
//     len(mockedMailgun.GetSingleDomainCalls())
func (mock *MailgunMock) GetSingleDomainCalls() []struct {
	Domain string
} {
	var calls []struct {
		Domain string
	}
	lockMailgunMockGetSingleDomain.RLock()
	calls = mock.calls.GetSingleDomain
	lockMailgunMockGetSingleDomain.RUnlock()
	return calls
}

// GetStats calls GetStatsFunc.
func (mock *MailgunMock) GetStats(limit int, skip int, startDate *time.Time, event ...string) (int, []mailgun.Stat, error) {
	if mock.GetStatsFunc == nil {
		panic("moq: MailgunMock.GetStatsFunc is nil but Mailgun.GetStats was just called")
	}
	callInfo := struct {
		Limit     int
		Skip      int
		StartDate *time.Time
		Event     []string
	}{
		Limit:     limit,
		Skip:      skip,
		StartDate: startDate,
		Event:     event,
	}
	lockMailgunMockGetStats.Lock()
	mock.calls.GetStats = append(mock.calls.GetStats, callInfo)
	lockMailgunMockGetStats.Unlock()
	return mock.GetStatsFunc(limit, skip, startDate, event...)
}

// GetStatsCalls gets all the calls that were made to GetStats.
// Check the length with:
//     len(mockedMailgun.GetStatsCalls())
func (mock *MailgunMock) GetStatsCalls() []struct {
	Limit     int
	Skip      int
	StartDate *time.Time
	Event     []string
} {
	var calls []struct {
		Limit     int
		Skip      int
		StartDate *time.Time
		Event     []string
	}
	lockMailgunMockGetStats.RLock()
	calls = mock.calls.GetStats
	lockMailgunMockGetStats.RUnlock()
	return calls
}

// GetStoredMessage calls GetStoredMessageFunc.
func (mock *MailgunMock) GetStoredMessage(id string) (mailgun.StoredMessage, error) {
	if mock.GetStoredMessageFunc == nil {
		panic("moq: MailgunMock.GetStoredMessageFunc is nil but Mailgun.GetStoredMessage was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockMailgunMockGetStoredMessage.Lock()
	mock.calls.GetStoredMessage = append(mock.calls.GetStoredMessage, callInfo)
	lockMailgunMockGetStoredMessage.Unlock()
	return mock.GetStoredMessageFunc(id)
}

// GetStoredMessageCalls gets all the calls that were made to GetStoredMessage.
// Check the length with:
//     len(mockedMailgun.GetStoredMessageCalls())
func (mock *MailgunMock) GetStoredMessageCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockMailgunMockGetStoredMessage.RLock()
	calls = mock.calls.GetStoredMessage
	lockMailgunMockGetStoredMessage.RUnlock()
	return calls
}

// GetStoredMessageForURL calls GetStoredMessageForURLFunc.
func (mock *MailgunMock) GetStoredMessageForURL(url string) (mailgun.StoredMessage, error) {
	if mock.GetStoredMessageForURLFunc == nil {
		panic("moq: MailgunMock.GetStoredMessageForURLFunc is nil but Mailgun.GetStoredMessageForURL was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	lockMailgunMockGetStoredMessageForURL.Lock()
	mock.calls.GetStoredMessageForURL = append(mock.calls.GetStoredMessageForURL, callInfo)
	lockMailgunMockGetStoredMessageForURL.Unlock()
	return mock.GetStoredMessageForURLFunc(url)
}

// GetStoredMessageForURLCalls gets all the calls that were made to GetStoredMessageForURL.
// Check the length with:
//     len(mockedMailgun.GetStoredMessageForURLCalls())
func (mock *MailgunMock) GetStoredMessageForURLCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	lockMailgunMockGetStoredMessageForURL.RLock()
	calls = mock.calls.GetStoredMessageForURL
	lockMailgunMockGetStoredMessageForURL.RUnlock()
	return calls
}

// GetStoredMessageRaw calls GetStoredMessageRawFunc.
func (mock *MailgunMock) GetStoredMessageRaw(id string) (mailgun.StoredMessageRaw, error) {
	if mock.GetStoredMessageRawFunc == nil {
		panic("moq: MailgunMock.GetStoredMessageRawFunc is nil but Mailgun.GetStoredMessageRaw was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockMailgunMockGetStoredMessageRaw.Lock()
	mock.calls.GetStoredMessageRaw = append(mock.calls.GetStoredMessageRaw, callInfo)
	lockMailgunMockGetStoredMessageRaw.Unlock()
	return mock.GetStoredMessageRawFunc(id)
}

// GetStoredMessageRawCalls gets all the calls that were made to GetStoredMessageRaw.
// Check the length with:
//     len(mockedMailgun.GetStoredMessageRawCalls())
func (mock *MailgunMock) GetStoredMessageRawCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockMailgunMockGetStoredMessageRaw.RLock()
	calls = mock.calls.GetStoredMessageRaw
	lockMailgunMockGetStoredMessageRaw.RUnlock()
	return calls
}

// GetStoredMessageRawForURL calls GetStoredMessageRawForURLFunc.
func (mock *MailgunMock) GetStoredMessageRawForURL(url string) (mailgun.StoredMessageRaw, error) {
	if mock.GetStoredMessageRawForURLFunc == nil {
		panic("moq: MailgunMock.GetStoredMessageRawForURLFunc is nil but Mailgun.GetStoredMessageRawForURL was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	lockMailgunMockGetStoredMessageRawForURL.Lock()
	mock.calls.GetStoredMessageRawForURL = append(mock.calls.GetStoredMessageRawForURL, callInfo)
	lockMailgunMockGetStoredMessageRawForURL.Unlock()
	return mock.GetStoredMessageRawForURLFunc(url)
}

// GetStoredMessageRawForURLCalls gets all the calls that were made to GetStoredMessageRawForURL.
// Check the length with:
//     len(mockedMailgun.GetStoredMessageRawForURLCalls())
func (mock *MailgunMock) GetStoredMessageRawForURLCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	lockMailgunMockGetStoredMessageRawForURL.RLock()
	calls = mock.calls.GetStoredMessageRawForURL
	lockMailgunMockGetStoredMessageRawForURL.RUnlock()
	return calls
}

// GetTag calls GetTagFunc.
func (mock *MailgunMock) GetTag(tag string) (mailgun.TagItem, error) {
	if mock.GetTagFunc == nil {
		panic("moq: MailgunMock.GetTagFunc is nil but Mailgun.GetTag was just called")
	}
	callInfo := struct {
		Tag string
	}{
		Tag: tag,
	}
	lockMailgunMockGetTag.Lock()
	mock.calls.GetTag = append(mock.calls.GetTag, callInfo)
	lockMailgunMockGetTag.Unlock()
	return mock.GetTagFunc(tag)
}

// GetTagCalls gets all the calls that were made to GetTag.
// Check the length with:
//     len(mockedMailgun.GetTagCalls())
func (mock *MailgunMock) GetTagCalls() []struct {
	Tag string
} {
	var calls []struct {
		Tag string
	}
	lockMailgunMockGetTag.RLock()
	calls = mock.calls.GetTag
	lockMailgunMockGetTag.RUnlock()
	return calls
}

// GetUnsubscribes calls GetUnsubscribesFunc.
func (mock *MailgunMock) GetUnsubscribes(limit int, skip int) (int, []mailgun.Unsubscription, error) {
	if mock.GetUnsubscribesFunc == nil {
		panic("moq: MailgunMock.GetUnsubscribesFunc is nil but Mailgun.GetUnsubscribes was just called")
	}
	callInfo := struct {
		Limit int
		Skip  int
	}{
		Limit: limit,
		Skip:  skip,
	}
	lockMailgunMockGetUnsubscribes.Lock()
	mock.calls.GetUnsubscribes = append(mock.calls.GetUnsubscribes, callInfo)
	lockMailgunMockGetUnsubscribes.Unlock()
	return mock.GetUnsubscribesFunc(limit, skip)
}

// GetUnsubscribesCalls gets all the calls that were made to GetUnsubscribes.
// Check the length with:
//     len(mockedMailgun.GetUnsubscribesCalls())
func (mock *MailgunMock) GetUnsubscribesCalls() []struct {
	Limit int
	Skip  int
} {
	var calls []struct {
		Limit int
		Skip  int
	}
	lockMailgunMockGetUnsubscribes.RLock()
	calls = mock.calls.GetUnsubscribes
	lockMailgunMockGetUnsubscribes.RUnlock()
	return calls
}

// GetUnsubscribesByAddress calls GetUnsubscribesByAddressFunc.
func (mock *MailgunMock) GetUnsubscribesByAddress(in1 string) (int, []mailgun.Unsubscription, error) {
	if mock.GetUnsubscribesByAddressFunc == nil {
		panic("moq: MailgunMock.GetUnsubscribesByAddressFunc is nil but Mailgun.GetUnsubscribesByAddress was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockGetUnsubscribesByAddress.Lock()
	mock.calls.GetUnsubscribesByAddress = append(mock.calls.GetUnsubscribesByAddress, callInfo)
	lockMailgunMockGetUnsubscribesByAddress.Unlock()
	return mock.GetUnsubscribesByAddressFunc(in1)
}

// GetUnsubscribesByAddressCalls gets all the calls that were made to GetUnsubscribesByAddress.
// Check the length with:
//     len(mockedMailgun.GetUnsubscribesByAddressCalls())
func (mock *MailgunMock) GetUnsubscribesByAddressCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockGetUnsubscribesByAddress.RLock()
	calls = mock.calls.GetUnsubscribesByAddress
	lockMailgunMockGetUnsubscribesByAddress.RUnlock()
	return calls
}

// GetWebhookByType calls GetWebhookByTypeFunc.
func (mock *MailgunMock) GetWebhookByType(kind string) (string, error) {
	if mock.GetWebhookByTypeFunc == nil {
		panic("moq: MailgunMock.GetWebhookByTypeFunc is nil but Mailgun.GetWebhookByType was just called")
	}
	callInfo := struct {
		Kind string
	}{
		Kind: kind,
	}
	lockMailgunMockGetWebhookByType.Lock()
	mock.calls.GetWebhookByType = append(mock.calls.GetWebhookByType, callInfo)
	lockMailgunMockGetWebhookByType.Unlock()
	return mock.GetWebhookByTypeFunc(kind)
}

// GetWebhookByTypeCalls gets all the calls that were made to GetWebhookByType.
// Check the length with:
//     len(mockedMailgun.GetWebhookByTypeCalls())
func (mock *MailgunMock) GetWebhookByTypeCalls() []struct {
	Kind string
} {
	var calls []struct {
		Kind string
	}
	lockMailgunMockGetWebhookByType.RLock()
	calls = mock.calls.GetWebhookByType
	lockMailgunMockGetWebhookByType.RUnlock()
	return calls
}

// GetWebhooks calls GetWebhooksFunc.
func (mock *MailgunMock) GetWebhooks() (map[string]string, error) {
	if mock.GetWebhooksFunc == nil {
		panic("moq: MailgunMock.GetWebhooksFunc is nil but Mailgun.GetWebhooks was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockGetWebhooks.Lock()
	mock.calls.GetWebhooks = append(mock.calls.GetWebhooks, callInfo)
	lockMailgunMockGetWebhooks.Unlock()
	return mock.GetWebhooksFunc()
}

// GetWebhooksCalls gets all the calls that were made to GetWebhooks.
// Check the length with:
//     len(mockedMailgun.GetWebhooksCalls())
func (mock *MailgunMock) GetWebhooksCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockGetWebhooks.RLock()
	calls = mock.calls.GetWebhooks
	lockMailgunMockGetWebhooks.RUnlock()
	return calls
}

// ListEvents calls ListEventsFunc.
func (mock *MailgunMock) ListEvents(in1 *mailgun.EventsOptions) *mailgun.EventIterator {
	if mock.ListEventsFunc == nil {
		panic("moq: MailgunMock.ListEventsFunc is nil but Mailgun.ListEvents was just called")
	}
	callInfo := struct {
		In1 *mailgun.EventsOptions
	}{
		In1: in1,
	}
	lockMailgunMockListEvents.Lock()
	mock.calls.ListEvents = append(mock.calls.ListEvents, callInfo)
	lockMailgunMockListEvents.Unlock()
	return mock.ListEventsFunc(in1)
}

// ListEventsCalls gets all the calls that were made to ListEvents.
// Check the length with:
//     len(mockedMailgun.ListEventsCalls())
func (mock *MailgunMock) ListEventsCalls() []struct {
	In1 *mailgun.EventsOptions
} {
	var calls []struct {
		In1 *mailgun.EventsOptions
	}
	lockMailgunMockListEvents.RLock()
	calls = mock.calls.ListEvents
	lockMailgunMockListEvents.RUnlock()
	return calls
}

// ListTags calls ListTagsFunc.
func (mock *MailgunMock) ListTags(in1 *mailgun.TagOptions) *mailgun.TagIterator {
	if mock.ListTagsFunc == nil {
		panic("moq: MailgunMock.ListTagsFunc is nil but Mailgun.ListTags was just called")
	}
	callInfo := struct {
		In1 *mailgun.TagOptions
	}{
		In1: in1,
	}
	lockMailgunMockListTags.Lock()
	mock.calls.ListTags = append(mock.calls.ListTags, callInfo)
	lockMailgunMockListTags.Unlock()
	return mock.ListTagsFunc(in1)
}

// ListTagsCalls gets all the calls that were made to ListTags.
// Check the length with:
//     len(mockedMailgun.ListTagsCalls())
func (mock *MailgunMock) ListTagsCalls() []struct {
	In1 *mailgun.TagOptions
} {
	var calls []struct {
		In1 *mailgun.TagOptions
	}
	lockMailgunMockListTags.RLock()
	calls = mock.calls.ListTags
	lockMailgunMockListTags.RUnlock()
	return calls
}

// NewEventIterator calls NewEventIteratorFunc.
func (mock *MailgunMock) NewEventIterator() *mailgun.EventIterator {
	if mock.NewEventIteratorFunc == nil {
		panic("moq: MailgunMock.NewEventIteratorFunc is nil but Mailgun.NewEventIterator was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockNewEventIterator.Lock()
	mock.calls.NewEventIterator = append(mock.calls.NewEventIterator, callInfo)
	lockMailgunMockNewEventIterator.Unlock()
	return mock.NewEventIteratorFunc()
}

// NewEventIteratorCalls gets all the calls that were made to NewEventIterator.
// Check the length with:
//     len(mockedMailgun.NewEventIteratorCalls())
func (mock *MailgunMock) NewEventIteratorCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockNewEventIterator.RLock()
	calls = mock.calls.NewEventIterator
	lockMailgunMockNewEventIterator.RUnlock()
	return calls
}

// NewMIMEMessage calls NewMIMEMessageFunc.
func (mock *MailgunMock) NewMIMEMessage(body io.ReadCloser, to ...string) *mailgun.Message {
	if mock.NewMIMEMessageFunc == nil {
		panic("moq: MailgunMock.NewMIMEMessageFunc is nil but Mailgun.NewMIMEMessage was just called")
	}
	callInfo := struct {
		Body io.ReadCloser
		To   []string
	}{
		Body: body,
		To:   to,
	}
	lockMailgunMockNewMIMEMessage.Lock()
	mock.calls.NewMIMEMessage = append(mock.calls.NewMIMEMessage, callInfo)
	lockMailgunMockNewMIMEMessage.Unlock()
	return mock.NewMIMEMessageFunc(body, to...)
}

// NewMIMEMessageCalls gets all the calls that were made to NewMIMEMessage.
// Check the length with:
//     len(mockedMailgun.NewMIMEMessageCalls())
func (mock *MailgunMock) NewMIMEMessageCalls() []struct {
	Body io.ReadCloser
	To   []string
} {
	var calls []struct {
		Body io.ReadCloser
		To   []string
	}
	lockMailgunMockNewMIMEMessage.RLock()
	calls = mock.calls.NewMIMEMessage
	lockMailgunMockNewMIMEMessage.RUnlock()
	return calls
}

// NewMessage calls NewMessageFunc.
func (mock *MailgunMock) NewMessage(from string, subject string, text string, to ...string) *mailgun.Message {
	if mock.NewMessageFunc == nil {
		panic("moq: MailgunMock.NewMessageFunc is nil but Mailgun.NewMessage was just called")
	}
	callInfo := struct {
		From    string
		Subject string
		Text    string
		To      []string
	}{
		From:    from,
		Subject: subject,
		Text:    text,
		To:      to,
	}
	lockMailgunMockNewMessage.Lock()
	mock.calls.NewMessage = append(mock.calls.NewMessage, callInfo)
	lockMailgunMockNewMessage.Unlock()
	return mock.NewMessageFunc(from, subject, text, to...)
}

// NewMessageCalls gets all the calls that were made to NewMessage.
// Check the length with:
//     len(mockedMailgun.NewMessageCalls())
func (mock *MailgunMock) NewMessageCalls() []struct {
	From    string
	Subject string
	Text    string
	To      []string
} {
	var calls []struct {
		From    string
		Subject string
		Text    string
		To      []string
	}
	lockMailgunMockNewMessage.RLock()
	calls = mock.calls.NewMessage
	lockMailgunMockNewMessage.RUnlock()
	return calls
}

// ParseAddresses calls ParseAddressesFunc.
func (mock *MailgunMock) ParseAddresses(addresses ...string) ([]string, []string, error) {
	if mock.ParseAddressesFunc == nil {
		panic("moq: MailgunMock.ParseAddressesFunc is nil but Mailgun.ParseAddresses was just called")
	}
	callInfo := struct {
		Addresses []string
	}{
		Addresses: addresses,
	}
	lockMailgunMockParseAddresses.Lock()
	mock.calls.ParseAddresses = append(mock.calls.ParseAddresses, callInfo)
	lockMailgunMockParseAddresses.Unlock()
	return mock.ParseAddressesFunc(addresses...)
}

// ParseAddressesCalls gets all the calls that were made to ParseAddresses.
// Check the length with:
//     len(mockedMailgun.ParseAddressesCalls())
func (mock *MailgunMock) ParseAddressesCalls() []struct {
	Addresses []string
} {
	var calls []struct {
		Addresses []string
	}
	lockMailgunMockParseAddresses.RLock()
	calls = mock.calls.ParseAddresses
	lockMailgunMockParseAddresses.RUnlock()
	return calls
}

// PollEvents calls PollEventsFunc.
func (mock *MailgunMock) PollEvents(in1 *mailgun.EventsOptions) *mailgun.EventPoller {
	if mock.PollEventsFunc == nil {
		panic("moq: MailgunMock.PollEventsFunc is nil but Mailgun.PollEvents was just called")
	}
	callInfo := struct {
		In1 *mailgun.EventsOptions
	}{
		In1: in1,
	}
	lockMailgunMockPollEvents.Lock()
	mock.calls.PollEvents = append(mock.calls.PollEvents, callInfo)
	lockMailgunMockPollEvents.Unlock()
	return mock.PollEventsFunc(in1)
}

// PollEventsCalls gets all the calls that were made to PollEvents.
// Check the length with:
//     len(mockedMailgun.PollEventsCalls())
func (mock *MailgunMock) PollEventsCalls() []struct {
	In1 *mailgun.EventsOptions
} {
	var calls []struct {
		In1 *mailgun.EventsOptions
	}
	lockMailgunMockPollEvents.RLock()
	calls = mock.calls.PollEvents
	lockMailgunMockPollEvents.RUnlock()
	return calls
}

// PublicApiKey calls PublicApiKeyFunc.
func (mock *MailgunMock) PublicApiKey() string {
	if mock.PublicApiKeyFunc == nil {
		panic("moq: MailgunMock.PublicApiKeyFunc is nil but Mailgun.PublicApiKey was just called")
	}
	callInfo := struct {
	}{}
	lockMailgunMockPublicApiKey.Lock()
	mock.calls.PublicApiKey = append(mock.calls.PublicApiKey, callInfo)
	lockMailgunMockPublicApiKey.Unlock()
	return mock.PublicApiKeyFunc()
}

// PublicApiKeyCalls gets all the calls that were made to PublicApiKey.
// Check the length with:
//     len(mockedMailgun.PublicApiKeyCalls())
func (mock *MailgunMock) PublicApiKeyCalls() []struct {
} {
	var calls []struct {
	}
	lockMailgunMockPublicApiKey.RLock()
	calls = mock.calls.PublicApiKey
	lockMailgunMockPublicApiKey.RUnlock()
	return calls
}

// RemoveUnsubscribe calls RemoveUnsubscribeFunc.
func (mock *MailgunMock) RemoveUnsubscribe(in1 string) error {
	if mock.RemoveUnsubscribeFunc == nil {
		panic("moq: MailgunMock.RemoveUnsubscribeFunc is nil but Mailgun.RemoveUnsubscribe was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockMailgunMockRemoveUnsubscribe.Lock()
	mock.calls.RemoveUnsubscribe = append(mock.calls.RemoveUnsubscribe, callInfo)
	lockMailgunMockRemoveUnsubscribe.Unlock()
	return mock.RemoveUnsubscribeFunc(in1)
}

// RemoveUnsubscribeCalls gets all the calls that were made to RemoveUnsubscribe.
// Check the length with:
//     len(mockedMailgun.RemoveUnsubscribeCalls())
func (mock *MailgunMock) RemoveUnsubscribeCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockMailgunMockRemoveUnsubscribe.RLock()
	calls = mock.calls.RemoveUnsubscribe
	lockMailgunMockRemoveUnsubscribe.RUnlock()
	return calls
}

// RemoveUnsubscribeWithTag calls RemoveUnsubscribeWithTagFunc.
func (mock *MailgunMock) RemoveUnsubscribeWithTag(a string, t string) error {
	if mock.RemoveUnsubscribeWithTagFunc == nil {
		panic("moq: MailgunMock.RemoveUnsubscribeWithTagFunc is nil but Mailgun.RemoveUnsubscribeWithTag was just called")
	}
	callInfo := struct {
		A string
		T string
	}{
		A: a,
		T: t,
	}
	lockMailgunMockRemoveUnsubscribeWithTag.Lock()
	mock.calls.RemoveUnsubscribeWithTag = append(mock.calls.RemoveUnsubscribeWithTag, callInfo)
	lockMailgunMockRemoveUnsubscribeWithTag.Unlock()
	return mock.RemoveUnsubscribeWithTagFunc(a, t)
}

// RemoveUnsubscribeWithTagCalls gets all the calls that were made to RemoveUnsubscribeWithTag.
// Check the length with:
//     len(mockedMailgun.RemoveUnsubscribeWithTagCalls())
func (mock *MailgunMock) RemoveUnsubscribeWithTagCalls() []struct {
	A string
	T string
} {
	var calls []struct {
		A string
		T string
	}
	lockMailgunMockRemoveUnsubscribeWithTag.RLock()
	calls = mock.calls.RemoveUnsubscribeWithTag
	lockMailgunMockRemoveUnsubscribeWithTag.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *MailgunMock) Send(m *mailgun.Message) (string, string, error) {
	if mock.SendFunc == nil {
		panic("moq: MailgunMock.SendFunc is nil but Mailgun.Send was just called")
	}
	callInfo := struct {
		M *mailgun.Message
	}{
		M: m,
	}
	lockMailgunMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	lockMailgunMockSend.Unlock()
	return mock.SendFunc(m)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedMailgun.SendCalls())
func (mock *MailgunMock) SendCalls() []struct {
	M *mailgun.Message
} {
	var calls []struct {
		M *mailgun.Message
	}
	lockMailgunMockSend.RLock()
	calls = mock.calls.Send
	lockMailgunMockSend.RUnlock()
	return calls
}

// SetAPIBase calls SetAPIBaseFunc.
func (mock *MailgunMock) SetAPIBase(url string) {
	if mock.SetAPIBaseFunc == nil {
		panic("moq: MailgunMock.SetAPIBaseFunc is nil but Mailgun.SetAPIBase was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	lockMailgunMockSetAPIBase.Lock()
	mock.calls.SetAPIBase = append(mock.calls.SetAPIBase, callInfo)
	lockMailgunMockSetAPIBase.Unlock()
	mock.SetAPIBaseFunc(url)
}

// SetAPIBaseCalls gets all the calls that were made to SetAPIBase.
// Check the length with:
//     len(mockedMailgun.SetAPIBaseCalls())
func (mock *MailgunMock) SetAPIBaseCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	lockMailgunMockSetAPIBase.RLock()
	calls = mock.calls.SetAPIBase
	lockMailgunMockSetAPIBase.RUnlock()
	return calls
}

// SetClient calls SetClientFunc.
func (mock *MailgunMock) SetClient(client *http.Client) {
	if mock.SetClientFunc == nil {
		panic("moq: MailgunMock.SetClientFunc is nil but Mailgun.SetClient was just called")
	}
	callInfo := struct {
		Client *http.Client
	}{
		Client: client,
	}
	lockMailgunMockSetClient.Lock()
	mock.calls.SetClient = append(mock.calls.SetClient, callInfo)
	lockMailgunMockSetClient.Unlock()
	mock.SetClientFunc(client)
}

// SetClientCalls gets all the calls that were made to SetClient.
// Check the length with:
//     len(mockedMailgun.SetClientCalls())
func (mock *MailgunMock) SetClientCalls() []struct {
	Client *http.Client
} {
	var calls []struct {
		Client *http.Client
	}
	lockMailgunMockSetClient.RLock()
	calls = mock.calls.SetClient
	lockMailgunMockSetClient.RUnlock()
	return calls
}

// Unsubscribe calls UnsubscribeFunc.
func (mock *MailgunMock) Unsubscribe(address string, tag string) error {
	if mock.UnsubscribeFunc == nil {
		panic("moq: MailgunMock.UnsubscribeFunc is nil but Mailgun.Unsubscribe was just called")
	}
	callInfo := struct {
		Address string
		Tag     string
	}{
		Address: address,
		Tag:     tag,
	}
	lockMailgunMockUnsubscribe.Lock()
	mock.calls.Unsubscribe = append(mock.calls.Unsubscribe, callInfo)
	lockMailgunMockUnsubscribe.Unlock()
	return mock.UnsubscribeFunc(address, tag)
}

// UnsubscribeCalls gets all the calls that were made to Unsubscribe.
// Check the length with:
//     len(mockedMailgun.UnsubscribeCalls())
func (mock *MailgunMock) UnsubscribeCalls() []struct {
	Address string
	Tag     string
} {
	var calls []struct {
		Address string
		Tag     string
	}
	lockMailgunMockUnsubscribe.RLock()
	calls = mock.calls.Unsubscribe
	lockMailgunMockUnsubscribe.RUnlock()
	return calls
}

// UpdateCampaign calls UpdateCampaignFunc.
func (mock *MailgunMock) UpdateCampaign(oldId string, name string, newId string) error {
	if mock.UpdateCampaignFunc == nil {
		panic("moq: MailgunMock.UpdateCampaignFunc is nil but Mailgun.UpdateCampaign was just called")
	}
	callInfo := struct {
		OldId string
		Name  string
		NewId string
	}{
		OldId: oldId,
		Name:  name,
		NewId: newId,
	}
	lockMailgunMockUpdateCampaign.Lock()
	mock.calls.UpdateCampaign = append(mock.calls.UpdateCampaign, callInfo)
	lockMailgunMockUpdateCampaign.Unlock()
	return mock.UpdateCampaignFunc(oldId, name, newId)
}

// UpdateCampaignCalls gets all the calls that were made to UpdateCampaign.
// Check the length with:
//     len(mockedMailgun.UpdateCampaignCalls())
func (mock *MailgunMock) UpdateCampaignCalls() []struct {
	OldId string
	Name  string
	NewId string
} {
	var calls []struct {
		OldId string
		Name  string
		NewId string
	}
	lockMailgunMockUpdateCampaign.RLock()
	calls = mock.calls.UpdateCampaign
	lockMailgunMockUpdateCampaign.RUnlock()
	return calls
}

// UpdateList calls UpdateListFunc.
func (mock *MailgunMock) UpdateList(in1 string, in2 mailgun.List) (mailgun.List, error) {
	if mock.UpdateListFunc == nil {
		panic("moq: MailgunMock.UpdateListFunc is nil but Mailgun.UpdateList was just called")
	}
	callInfo := struct {
		In1 string
		In2 mailgun.List
	}{
		In1: in1,
		In2: in2,
	}
	lockMailgunMockUpdateList.Lock()
	mock.calls.UpdateList = append(mock.calls.UpdateList, callInfo)
	lockMailgunMockUpdateList.Unlock()
	return mock.UpdateListFunc(in1, in2)
}

// UpdateListCalls gets all the calls that were made to UpdateList.
// Check the length with:
//     len(mockedMailgun.UpdateListCalls())
func (mock *MailgunMock) UpdateListCalls() []struct {
	In1 string
	In2 mailgun.List
} {
	var calls []struct {
		In1 string
		In2 mailgun.List
	}
	lockMailgunMockUpdateList.RLock()
	calls = mock.calls.UpdateList
	lockMailgunMockUpdateList.RUnlock()
	return calls
}

// UpdateMember calls UpdateMemberFunc.
func (mock *MailgunMock) UpdateMember(Member string, list string, prototype mailgun.Member) (mailgun.Member, error) {
	if mock.UpdateMemberFunc == nil {
		panic("moq: MailgunMock.UpdateMemberFunc is nil but Mailgun.UpdateMember was just called")
	}
	callInfo := struct {
		Member    string
		List      string
		Prototype mailgun.Member
	}{
		Member:    Member,
		List:      list,
		Prototype: prototype,
	}
	lockMailgunMockUpdateMember.Lock()
	mock.calls.UpdateMember = append(mock.calls.UpdateMember, callInfo)
	lockMailgunMockUpdateMember.Unlock()
	return mock.UpdateMemberFunc(Member, list, prototype)
}

// UpdateMemberCalls gets all the calls that were made to UpdateMember.
// Check the length with:
//     len(mockedMailgun.UpdateMemberCalls())
func (mock *MailgunMock) UpdateMemberCalls() []struct {
	Member    string
	List      string
	Prototype mailgun.Member
} {
	var calls []struct {
		Member    string
		List      string
		Prototype mailgun.Member
	}
	lockMailgunMockUpdateMember.RLock()
	calls = mock.calls.UpdateMember
	lockMailgunMockUpdateMember.RUnlock()
	return calls
}

// UpdateRoute calls UpdateRouteFunc.
func (mock *MailgunMock) UpdateRoute(in1 string, in2 mailgun.Route) (mailgun.Route, error) {
	if mock.UpdateRouteFunc == nil {
		panic("moq: MailgunMock.UpdateRouteFunc is nil but Mailgun.UpdateRoute was just called")
	}
	callInfo := struct {
		In1 string
		In2 mailgun.Route
	}{
		In1: in1,
		In2: in2,
	}
	lockMailgunMockUpdateRoute.Lock()
	mock.calls.UpdateRoute = append(mock.calls.UpdateRoute, callInfo)
	lockMailgunMockUpdateRoute.Unlock()
	return mock.UpdateRouteFunc(in1, in2)
}

// UpdateRouteCalls gets all the calls that were made to UpdateRoute.
// Check the length with:
//     len(mockedMailgun.UpdateRouteCalls())
func (mock *MailgunMock) UpdateRouteCalls() []struct {
	In1 string
	In2 mailgun.Route
} {
	var calls []struct {
		In1 string
		In2 mailgun.Route
	}
	lockMailgunMockUpdateRoute.RLock()
	calls = mock.calls.UpdateRoute
	lockMailgunMockUpdateRoute.RUnlock()
	return calls
}

// UpdateWebhook calls UpdateWebhookFunc.
func (mock *MailgunMock) UpdateWebhook(kind string, url string) error {
	if mock.UpdateWebhookFunc == nil {
		panic("moq: MailgunMock.UpdateWebhookFunc is nil but Mailgun.UpdateWebhook was just called")
	}
	callInfo := struct {
		Kind string
		URL  string
	}{
		Kind: kind,
		URL:  url,
	}
	lockMailgunMockUpdateWebhook.Lock()
	mock.calls.UpdateWebhook = append(mock.calls.UpdateWebhook, callInfo)
	lockMailgunMockUpdateWebhook.Unlock()
	return mock.UpdateWebhookFunc(kind, url)
}

// UpdateWebhookCalls gets all the calls that were made to UpdateWebhook.
// Check the length with:
//     len(mockedMailgun.UpdateWebhookCalls())
func (mock *MailgunMock) UpdateWebhookCalls() []struct {
	Kind string
	URL  string
} {
	var calls []struct {
		Kind string
		URL  string
	}
	lockMailgunMockUpdateWebhook.RLock()
	calls = mock.calls.UpdateWebhook
	lockMailgunMockUpdateWebhook.RUnlock()
	return calls
}

// ValidateEmail calls ValidateEmailFunc.
func (mock *MailgunMock) ValidateEmail(email string) (mailgun.EmailVerification, error) {
	if mock.ValidateEmailFunc == nil {
		panic("moq: MailgunMock.ValidateEmailFunc is nil but Mailgun.ValidateEmail was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockMailgunMockValidateEmail.Lock()
	mock.calls.ValidateEmail = append(mock.calls.ValidateEmail, callInfo)
	lockMailgunMockValidateEmail.Unlock()
	return mock.ValidateEmailFunc(email)
}

// ValidateEmailCalls gets all the calls that were made to ValidateEmail.
// Check the length with:
//     len(mockedMailgun.ValidateEmailCalls())
func (mock *MailgunMock) ValidateEmailCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockMailgunMockValidateEmail.RLock()
	calls = mock.calls.ValidateEmail
	lockMailgunMockValidateEmail.RUnlock()
	return calls
}

// VerifyWebhookRequest calls VerifyWebhookRequestFunc.
func (mock *MailgunMock) VerifyWebhookRequest(req *http.Request) (bool, error) {
	if mock.VerifyWebhookRequestFunc == nil {
		panic("moq: MailgunMock.VerifyWebhookRequestFunc is nil but Mailgun.VerifyWebhookRequest was just called")
	}
	callInfo := struct {
		Req *http.Request
	}{
		Req: req,
	}
	lockMailgunMockVerifyWebhookRequest.Lock()
	mock.calls.VerifyWebhookRequest = append(mock.calls.VerifyWebhookRequest, callInfo)
	lockMailgunMockVerifyWebhookRequest.Unlock()
	return mock.VerifyWebhookRequestFunc(req)
}

// VerifyWebhookRequestCalls gets all the calls that were made to VerifyWebhookRequest.
// Check the length with:
//     len(mockedMailgun.VerifyWebhookRequestCalls())
func (mock *MailgunMock) VerifyWebhookRequestCalls() []struct {
	Req *http.Request
} {
	var calls []struct {
		Req *http.Request
	}
	lockMailgunMockVerifyWebhookRequest.RLock()
	calls = mock.calls.VerifyWebhookRequest
	lockMailgunMockVerifyWebhookRequest.RUnlock()
	return calls
}
